Shell Scripting with Bash
1.

What is a key reason for using the declare command to create variables within bash?

1. What is a key reason for using the declare command to create variables within bash?
Incorrect -
There is no significant reason for using the declare command within bash because we can name them instead.

Incorrect -
Using the declare command makes all variables persistent.

Your choice: correct -
Using declare allows you to explicitly specify the variable's attributes.

Incorrect -
Using the declare command is limited to creating global variables.

Incorrect -
I don't know yet.

Is something wrong with the question?

Shell Scripting with Bash
3.

Taking into account that the following command was used to run the script named myscript as a daemon.

nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?

3. Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?
Your choice: incorrect -
There is no downside to this approach as this is standard approach for modern Linux systems.

Incorrect -
The script will still be attached to the current terminal.

Incorrect -
It only provides the capacity for automatic restarts

Correct -
It doesn't provide proper process management and logging

Incorrect -
I don't know yet.

Is something wrong with the question?

Shell Scripting with Bash
4.

What is used with echo allows for embedded control characters?

4. What is used with echo allows for embedded control characters?
Incorrect -
-f

Incorrect -
-c

Your choice: correct -
-e

Incorrect -
-p

Incorrect -
I don't know yet.

Is something wrong with the question?

Shell Scripting with Bash
5.

Consider the following script.sh: 

echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4

With which single command should you replace the dotted line to make output of the script correct?

5. Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4  With which single command should you replace the dotted line to make output of the script correct?
Your choice: incorrect -
shift 1

Incorrect -
shift 3

Correct -
shift 2

Incorrect -
move 2

Incorrect -
I don't know yet.

Is something wrong with the question?

Shell Scripting with Bash
6.

As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?

6. As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?
Your choice: incorrect -
cat > /etc/motd <<<EOF
This a a secure system managed by example.com
Employee access only
<<<EOF
Incorrect -
read > /etc/motd <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Correct -
cat > /etc/motd <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Incorrect -
cat <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Incorrect -
I don't know yet.

Is something wrong with the question?

Shell Scripting with Bash
7.

Which variable in Bash is used to represents the executing script's name?

7. Which variable in Bash is used to represents the executing script's name?
Incorrect -
$?
Incorrect -
$1
Your choice: correct -
$0
Incorrect -
$!
Incorrect -
I don't know yet.

Is something wrong with the question?

Shell Scripting with Bash
8.

In the context of Bash scripting, which specific term is used to declare a function?

8. In the context of Bash scripting, which specific term is used to declare a function?
Incorrect -
bash_function

Incorrect -
funct

Incorrect -
Bash functions cannot be defined using a keyword. 

Your choice: correct -
function

Incorrect -
I don't know yet.

Is something wrong with the question?

9. The script file called myscript.sh contains the following command:
echo $#
What would be the expected output of the following command:
./myscript.sh alpha beta delta
Your choice: correct -
3

Incorrect -
alpha

beta

delta

Incorrect -
alpha beta delta

Incorrect -
$#

Incorrect -
I don't know yet.

Is something wrong with the question?

10.

The following script has been developed by your colleague who reports that it does not always terminate when the users request:

while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

10. The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?
Your choice: incorrect -
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "N" ] ; then
  break
 fi
done
Incorrect -
while true; do
 declare -L REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Correct -
while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Incorrect -
while true; do
 declare -l $REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Incorrect -
I don't know yet.

Is something wrong with the question?

11.

Which character is used after each option letter to indicate that the option requires an argument when using the getopts function?

11. Which character is used after each option letter to indicate that the option requires an argument when using the getopts function?
Incorrect -
&

Incorrect -
|

Incorrect -
/

Your choice: correct -
:

Incorrect -
I don't know yet.

Is something wrong with the question?

12.

How does a HEREDOC differ from simple stdin redirection?

12. How does a HEREDOC differ from simple stdin redirection?
Your choice: incorrect -
Using HEREDOCs redirection is from stdout.

Incorrect -
A HEREDOC specifies the file to open.

Correct -
A HEREDOC specifies a block of text to be passed to the stdin of a process.

Incorrect -
HEREDOC redirection does not use delimeters which are used in stdin.

Incorrect -
I don't know yet.

Is something wrong with the question?

13.

Consider a situation where you have a shell script named "test" in your current working directory and an executable program with the same name "test" in the /usr/local/bin directory. Your PATH environment variable includes both the current working directory (.) and /usr/local/bin.

You can investigate the "test" command/program with either the type or which commands? Which would be better suited for this task ?

13. Consider a situation where you have a shell script named "test" in your current working directory and an executable program with the same name "test" in the /usr/local/bin directory. Your PATH environment variable includes both the current working directory (.) and /usr/local/bin. You can investigate the "test" command/program with either the type or which commands? Which would be better suited for this task ?
Incorrect -
Neither of these commands can be used for investigating the "test" command/program. 

Incorrect -
Both are equally good for inspecting the "test" program/command with no significant difference between the two.

Your choice: correct -
The type command would be more appropriate for inspecting the "test" command/program because it provides more comprehensive information about the command, indicating its type and location.

Incorrect -
The which command would be more appropriate for inspecting the "test" command/program because it provides more comprehensive information about the command, indicating its type and location. 

Incorrect -
I don't know yet.

Is something wrong with the question?

14.

Suppose you have the following function defined in myfunction.sh:

#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:

#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?

14. Suppose you have the following function defined in myfunction.sh:
#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:
#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?
Your choice: incorrect -
#!/bin/bash
./myfunction.sh
greet
Incorrect -
#!/bin/bash
import myfunction.sh
greet 
Incorrect -
#!/bin/bash
myfunction.sh(greet) 
Correct -
#!/bin/bash
source myfunction.sh
greet
Incorrect -
I don't know yet.

Is something wrong with the question?

15.

Which is the correct syntax for using variable expansion to provide a default value? 

15. Which is the correct syntax for using variable expansion to provide a default value? 
Incorrect -
{$VARNAME:-$DEFAULT_VALUE} 
Incorrect -
${-DEFAULT_VALUE:VARNAME} 
Your choice: incorrect -
${VARNAME:-$DEFAULT_VALUE} 
Correct -
${VARNAME:-DEFAULT_VALUE}
Incorrect -
I don't know yet.

Is something wrong with the question?

16.

What is the shebang can be added to a script so it will print the execution trace for debugging purposes?

16. What is the shebang can be added to a script so it will print the execution trace for debugging purposes?
Your choice: incorrect -
#!/bin/bash -d
Correct -
#!/bin/bash -x
Incorrect -
#!/bin/bash -e
Incorrect -
#!/bin/bash -t
Incorrect -
I don't know yet.

Is something wrong with the question?


17.

You use these commands to create an array of users.

my_users=(user1 user2 user3)
my_users+=(user4 user5)
unset my_users[2]
You decide to run the following command: 

echo "${my_users[@]}"
What will be the outcome?

17. You use these commands to create an array of users.
my_users=(user1 user2 user3)
my_users+=(user4 user5)
unset my_users[2]
You decide to run the following command: 
echo "${my_users[@]}"
What will be the outcome?
Your choice: incorrect -
user1 user2 user 3 user4

Incorrect -
user1 user2 user3 user5

Correct -
user1 user2 user4 user5

Incorrect -
user1 user 3 user4 user5

Incorrect -
I don't know yet.

Is something wrong with the question?


18.

What is the difference between using the $# and $* special variables?

18. What is the difference between using the $# and $* special variables?
Incorrect -
There is no difference between the special variables and can be used interchangeably.

Your choice: correct -
The special variable $# holds the total number of arguments passed while the special variable $* holds the values of the arguments passed.

Incorrect -
The special variable $* holds the total number of arguments passed while the special variable $# holds the values of the arguments passed. 

Incorrect -
The special variable $# holds the total number of comments passed while the special variable $* holds the number of the arguments passed.

Incorrect -
I don't know yet.

Is something wrong with the question?

19.

A bash script you are analyzing prints each command before executing it and also exits immediately after a command fails. 

Which commands could cause this behavior?

19. A bash script you are analyzing prints each command before executing it and also exits immediately after a command fails.  Which commands could cause this behavior?
Your choice: correct -
set -x and set -e

Incorrect -
set -f and set -e

Incorrect -
set -x and set -u

Incorrect -
set -u and set -f

Incorrect -
I don't know yet.

Is something wrong with the question?


20.

What is the main difference between the $@ and the $* special parameters? 

20. What is the main difference between the $@ and the $* special parameters? 
Incorrect -
When using $@, the parameters are treated as a single string while $* treats each parameter as a separate integer.

Your choice: correct -
When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

Incorrect -
When using $@, the parameters are treated as a single string while $* treats each parameter as a separate item. 

Incorrect -
There is no significant difference between these special parameters.

Incorrect -
I don't know yet.

Is something wrong with the question?

Shell Scripting with Bash

1. Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

	sudo useradd "$MYUSER"
	
2. Which keyword is used to declare local variables within functions?

	local
	
3. Which octal value sets the following symbolic permissions?
rwxr-xr-x

	755
	
4. What is the shebang can be added to a script so it will print the execution trace for debugging purposes?

	#!/bin/bash -x
	
5. Which character is used after each option letter to indicate that the option requires an argument when using the getopts function?

	:
	
6. What is the expected behavior of the following script? 
[[ $(id -u) -eq 0 ]] && user="yes" || user="no"

echo "$user"

	Checks if the UID of the current user is equal to 0 and outputs "yes" if the UID is equal to 0 or "no" if it is not equal to 0. 
	
7. What is used with echo allows for embedded control characters?

	-e
	
8. Which is a valid Bash variable name?

	_var1
	
9. In the context of Bash scripting, which specific term is used to declare a function?

	function
	
10. l. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?

	if [ $# -ne 1 ]
	then
	  echo "Usage $0 arg1"
	  exit 2
	fi
	echo "$1"
	
11. A bash script you are analyzing prints each command before executing it and also exits immediately after a command fails.  Which commands could cause this behavior?

	set -x and set -e
	
12. You have a Bash script that sets a variable called VAR to a value of 255. You want to make this variable available to any child processes that the script spawns. How might you modify the script to achieve this task?

	export VAR
	
13. Which special parameter retrieves all parameters as a single string ?

	$*
	
14. What is the difference between the Bash operators > and >> ?

	> is used to overwrite a file and >> is used to append to a file.
	
15. You have been asked by a colleague to review the following Bash printf command as they are can't get the decimal places to print
printf '$%d\n' 123.126
What command would correctly print as currency and include just two decimal places?

	printf '$%.2f\n' 123.126
	
16. What is the difference between using the $# and $* special variables?

	The special variable $# holds the total number of arguments passed while the special variable $* holds the values of the arguments passed.
	
17. You are aware that many of your developers make use of the umask extensively when working at the command line. Over time, you notice inconsistency in the execute permission being set on scripts. Currently, to set the execute permission for all objects the following command is used:
chmod +x file.sh
To ensure consistency in setting the execute permission for all objects how should you modify the command?

	chmod a+x
	
18. Which Bash operator is used to send the output of one process to the input of another?
	
	|
	
19.
if (( $num % 2 == 0 )); then
  echo "yes"
else
  echo "no"
fi

if [[ $num -lt 0 ]]; then
  echo "yes"
elif [[ $num -gt 0 ]]; then
  echo "no"
else
  echo "neither"
fi
What would be the output of the script if the variable "num" would be 10.

	yes

	no
	
20. The special variables $* and $@ present all arguments to a script, but what is the difference between the two variables?

	$* holds all arguments in a single string and $@ as an array.
	
1. As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?

	echo -n "Enter data: "
	
2. As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?

	cat > /etc/motd <<EOF
	This a a secure system managed by example.com
	Employee access only
	EOF
	
3. The standard syntax for searching and replacing text in Bash is: f${variable/search/replace}. What is the outcome of using the following syntax: ${my_string//this/there}?

	Replaces all instances of the string this with the string there.
	
4. Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?
	
	sudo useradd "$MYUSER"
	
5. You have the following entry in your crontab file:
0 \* \* \* \* /opt/bin/server-checkup
What is the outcome of this entry ?

	The server-checkup script is run on an hourly basis.
	
6. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?

	Run the which git command and if the exit is code is not 0 then git is not installed.
	
7. You are reviewing code that populates the values of an array variable:
NAMES=('bob' 'ingrid' 'pete')
How would you correctly address the variable where 'ingrid' is stored?

	${NAMES[1]}
	
8. What can using the shift command allow you to do?

	Remove the first parameter passed to the script, allowing the second parameter to become first.
	
9. You are writing a script that expects a variable number of command line arguments, where each argument represents a filename. The script should print the contents of each file to the console, one after another. If no arguments were specified the script should return an error message. Which is the best solution for this task ?

	if [ $# -eq 0 ]; then
	  echo "Error: no filenames specified"
	  exit 1
	fi

	for file in "$@"; do
	  echo "Contents of $file:"
	  cat "$file"
	done
	
10. The script file called myscript.sh contains the following command:
echo $#
What would be the expected output of the following command:
./myscript.sh alpha beta delta

	3
	
11. How do Bash c-style and classic for loops differ?

	Classic for loops increment through a list and C-style loops provide more control though increment values.
	
12. Suppose you have the following function defined in myfunction.sh:
#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:
#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?

	#!/bin/bash
	source myfunction.sh
	greet
	
13. You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure. What script achieves this outcome?

	create_user() {
	  local username=$1
	  local password=$2
	  
	  sudo useradd -m -p $(echo $password) $username
	  
	  # Check if the user was successfully created
	  if [ $? -eq 0 ]; then
		echo "User account created successfully."
	  else
		echo "Error: failed to create user account."
	  fi
	}

	read -p "Enter a username: " username
	read -p "Enter a password: " password

	create_user $username $password
	
14. Which variable in Bash is used to represents the executing script's name?
	
	$0
	
15. What can you use exec redirection for inside of a Bash script?

	Redirection using exec allows all stdout from the script redirected to a named file.
	
16. How does a HEREDOC differ from simple stdin redirection?

	A HEREDOC specifies a block of text to be passed to the stdin of a process.
	
17. What is the correct syntax for using conditional expressions as a shortcut for if/then/else statements.

	<condition> && <if-true> || <if-false>

	[[ $age -ge 18 ]] && result="Age is greater than 18" || result="Age is below 18"
	
18. Which Bash operator is used to send the output of one process to the input of another?

	|
	
19. Which character is used to replace the test command in bash shorthand notation?

	[ ]
	
20. As a script developer, you need a script to always execute in debug mode while you are working on it. You have decided to implement a shebang to implement this with Bash. Which shebang should you choose?

	#!/bin/bash -x
	
1. You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

	read -p "Enter the filename: " ANSWER
	
2. The following script should allow for just one argument being supplied. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?

	if [ $# -ne 1 ]
	then
	  echo "Usage $0 arg1"
	  exit 2
	fi
	echo "$1"
	
3. What is the main benefit of exporting a variable?

	An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.
	
4. You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 

	COUNT=10
	if (( COUNT > 9 ))
	  then
	   echo "Hello"
	fi
	
5. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:
cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?

	HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.
	
6. Which loop is best suited to be used while you wait for a condition to become true in Bash?

	until
	
7. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

	Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.
	
8. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:
LOG=/tmp/logfile
exec > $LOG
echo hello

	Before the exec command add the line to duplicate stdin :

	exec 6>&1
	
9.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?

	case "$1" in
	  'start')
		echo "Starting"
		;;
	   'stop')
		 echo "Stopping"
		 ;;
	   *)
		echo "Usage: $0 start|stop"
		;;
	esac
	
10. Which statement is considered good practice for writing portable code?

	Use #!/bin/sh 
	
11. Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?

	The variable greeting should be global and the variable name should be local.
	
12.
declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"
Which of the commands within the script above is bound to fail?

	my_var3="Goodbye, World!"
	
13. The output of a script should produce the following results as requested by your manager:
1 2 3 4 5 6 7 8 9 10
The output should be on its own line in the console and clear of any prompt. Which solution best meets this requirement?

	for i in {1..10}; do echo -n "$i "; done; echo
	
14. What is process substitution in the Bash shell?

	Piping of the stdout of one or more processes to the stdin of another.
	
15.
check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

	if [ -z "$process_pid" ]; then
		return 1
	  else
		return $process_pid
	  fi
	  
16. What is the difference in the execution of printf with and without the -v option?

	Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.
	
17. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?

	Ease of typing
	
18. Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4  With which single command should you replace the dotted line to make output of the script correct?

	shift 2
	
19. Consider a situation where you have a shell script named "test" in your current working directory and an executable program with the same name "test" in the /usr/local/bin directory. Your PATH environment variable includes both the current working directory (.) and /usr/local/bin. You can investigate the "test" command/program with either the type or which commands? Which would be better suited for this task ?

	The type command would be more appropriate for inspecting the "test" command/program because it provides more comprehensive information about the command, indicating its type and location.
	
20. As a Linux administrator you need to create daily backup files with unique names. How can the backup file be named using temporary variables?

	backup.$(date +%F)
	
3. The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

		while true; do
		 declare -l REPLY
		 read -p "Do you want to continue: y/n "
		 echo "hello"
		 if [ "$REPLY" == "n" ] ; then
		  break
		 fi
		done
		
4. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task 

	search() {
		find "$2" -name "*.$1" -type f -print
	}
	
6. Which is the correct syntax for using variable expansion to provide a default value? 

	${VARNAME:-DEFAULT_VALUE}
	
9. Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?

	The shebang specifies zsh as the script interpreter.
	
10. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.
sudo tar -cvf etc.tar /etc 2>/dev/null&

	sudo tar -cvf etc.tar /etc &>/dev/null&
	
13. You create the following script designed to print the values of multiple variables with numerical suffixes.
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?

	#!/usr/bin/bash
	user1=bob
	user2=jane
	for arg in {1..2} ; do
	eval "echo \${user$arg}"
	done
	
15. It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.

	COUNT=0
	while true; do
	  echo $COUNT
	  let "COUNT++"
	  if [ "$COUNT" -gt 1000 ]; then
		  break
	  fi
	done
	
17. Which option for the test command is used to check that the sticky bit is set on a directory?

	-k
	
20. Consider the following code:
DIR='my own dir'
mkdir $DIR
How many directories will be created using this code?

	Three
	
22. In Bash, what is a valid way to return non-numeric values from a function?

	Store non-numerical values in global variables and access them outside of the function.

1.
 
Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?

•  The shebang specifies zsh as the script interpreter.

2.
 
The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

A : while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

3.
 
You develop a script that should run code until the user chooses to quit. Having chosen to implement a while loop, which is a possible solution?
A :
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

4.
 
Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?

A ; The variable greeting should be global and the variable name should be local.

5.
 
Which is the correct syntax for using variable expansion to provide a default value? 
${VARNAME:-DEFAULT_VALUE}
6.
 
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.
7.
 
As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
A : 
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

8.
 
After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
A ; $BASHPID

9.
declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"
Which of the commands within the script above is bound to fail?
A ; my_var3="Goodbye, World!"


10.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?

create_user() {
  local username=$1
  local password=$2
  
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: " username
read -p "Enter a password: " password

create_user $username $password


11.
 
Why do you use exec redirection in a script rather than simple redirection?
•  
•  All stdout or all stderr can output from the script needs to go to the same file.
•  
12.
 
You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 
A ; COUNT=10
if (( COUNT > 9 ))
  then
   echo "Hello"
fi

13.
 
What can using the shift command allow you to do?
•  
A ; •  Remove the first parameter passed to the script, allowing the second parameter to become first.
•  

14.
check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

A ; if [ -z "$process_pid" ]; then
    return 1
  else
    return $process_pid
  fi

15.
 
In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?

A: •  Ease of typing
•  

16.
 
Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.

A ; •  9 is the expected output because the newline character is treated as a single character
•  
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
A :
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac

18.
 
What is the difference in the execution of printf with and without the -v option?
•  
A: •  Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.
•  

19.
 
A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:

A: HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.

20.
 
Which is a preferred alternative to the which command when using Bash? 
•  
•  command -v
•  
1.
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Ans: Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

2.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
Ans: 
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
 
3.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

Ans: sudo useradd "$MYUSER"

4.
 
What is the main benefit of exporting a variable?

An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.

5.
 
Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?

Ans: It doesn't provide proper process management and logging

check_process() {

  local process_name="httpd"

  local process_pid=$(pgrep $process_name)

..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

 if [ -z "$process_pid" ]; then

    return 1

  else

    return $process_pid

  fi


Assume you have the following Bash function defined:
function myfunction {

    var1=0

    for num in "$@"; do

        if [[ $num -gt $var1 ]]; then

            var1=$num

        fi

    done

    echo $var1

}
What is the expected output of the function if you call it as stated bellow:
myfunction 16 3 17 2
17

8.
 
Why do you use exec redirection in a script rather than simple redirection?

All stdout or all stderr can output from the script needs to go to the same file.
9.
 
Which is a preferred alternative to the which command when using Bash? 

command -v

10.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

•  shift 2

11.
 
You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

read -p "Enter the filename: " ANSWER

12.
 
Which option for the test command is used to check that the sticky bit is set on a directory?
•   -k

13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password


14.
 
Why is it recommended to avoid the which command within Bash?

The which command may lead to unexpected results or may not provide complete information about a command.



What is the main difference between the $@ and the $* special parameters? 

Ans: When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

 
A Linux administrator is creating a script to run on request in a user's environment to print the process information for the current shell. Upon consideration which command provides the best flexibility?
Ans: ps -fp $$

 
As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?
Ans: echo -n "Enter data: "

How do Bash c-style and classic for loops differ?
Ans: Classic for loops increment through a list and C-style loops provide more control though increment values.

19.
#First Function
function print {

  for arg in "$@"; do

    echo "[$arg]"

  done

}
#Second Function 
function print {

  for arg in "$*"; do

    echo "[$arg]"

  done

}
Input:
print "alpha" "beta delta" "gamma"
Which of the functions above will return the following output: 
[alpha]
[beta delta]
[gamma]

Ans: The first function.

What can using the shift command allow you to do?
Ans: Remove the first parameter passed to the script, allowing the second parameter to become first.




1.declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"Which of the commands within the script above is bound to fail?
•	Your choice: correct -my_var3="Goodbye, World!"

2. An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:alias report="printf 'User: %s\nDirectory: %s\n'"

alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

3. Which loop is best suited to be used while you wait for a condition to become true in Bash?
Until

4. Which is the correct syntax for using variable expansion to provide a default value?  
${VARNAME:-DEFAULT_VALUE}

5. As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•	Your choice: correct -LOG=/tmp/logfile
exec 6>&1
exec > $LOG

6. Using the file command to investigate a script the following is printed:$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
The shebang specifies zsh as the script interpreter.

7. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task ?
•	Your choice: correct -search() {
    find "$2" -name "*.$1" -type f -print
}

8. You create the following script designed to print the values of multiple variables with numerical suffixes.#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
doneThe script errors on execution, how would you correct the script so it prints both variables correctly?
ANS
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done

9. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.sudo tar -cvf etc.tar /etc 2>/dev/null&

sudo tar -cvf etc.tar /etc &>/dev/null&

10. The following script has been developed by your colleague who reports that it does not always terminate when the users request:while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
doneSome users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

11. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

12. As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

13. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•	Your choice: correct -
Ease of typing

14. The output of a script should produce the following results as requested by your manager:1 2 3 4 5 6 7 8 9 10
for i in {1..10}; do echo -n "$i "; done; echo

15. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.


16. Why do you use exec redirection in a script rather than simple redirection?
All stdout or all stderr can output from the script needs to go to the same file.


17. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:LOG=/tmp/logfile
exec > $LOG
echo hello
•	Correct -
Before the exec command add the line to duplicate stdin :
exec 6>&1


18. After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•	Your choice: correct -$BASHPID

19. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?
•	Correct -
Run the which git command and if the exit is code is not 0 then git is not installed.

20.case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esacReview the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac



1.
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Ans: Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

2.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
Ans: 
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
 
3.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

Ans: sudo useradd "$MYUSER"

4.
 
What is the main benefit of exporting a variable?

An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.

5.
 
Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?

Ans: It doesn't provide proper process management and logging

check_process() {

  local process_name="httpd"

  local process_pid=$(pgrep $process_name)

..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

 if [ -z "$process_pid" ]; then

    return 1

  else

    return $process_pid

  fi


Assume you have the following Bash function defined:
function myfunction {

    var1=0

    for num in "$@"; do

        if [[ $num -gt $var1 ]]; then

            var1=$num

        fi

    done

    echo $var1

}
What is the expected output of the function if you call it as stated bellow:
myfunction 16 3 17 2
17

8.
 
Why do you use exec redirection in a script rather than simple redirection?

All stdout or all stderr can output from the script needs to go to the same file.
9.
 
Which is a preferred alternative to the which command when using Bash? 

command -v

10.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

•  shift 2

11.
 
You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

read -p "Enter the filename: " ANSWER

12.
 
Which option for the test command is used to check that the sticky bit is set on a directory?
•   -k

13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password


14.
 
Why is it recommended to avoid the which command within Bash?

The which command may lead to unexpected results or may not provide complete information about a command.



What is the main difference between the $@ and the $* special parameters? 

Ans: When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

 
A Linux administrator is creating a script to run on request in a user's environment to print the process information for the current shell. Upon consideration which command provides the best flexibility?
Ans: ps -fp $$

 
As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?
Ans: echo -n "Enter data: "

How do Bash c-style and classic for loops differ?
Ans: Classic for loops increment through a list and C-style loops provide more control though increment values.

19.
#First Function
function print {

  for arg in "$@"; do

    echo "[$arg]"

  done

}
#Second Function 
function print {

  for arg in "$*"; do

    echo "[$arg]"

  done

}
Input:
print "alpha" "beta delta" "gamma"
Which of the functions above will return the following output: 
[alpha]
[beta delta]
[gamma]

Ans: The first function.

What can using the shift command allow you to do?
Ans: Remove the first parameter passed to the script, allowing the second parameter to become first.




1.declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"Which of the commands within the script above is bound to fail?
•	Your choice: correct -my_var3="Goodbye, World!"

2. An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:alias report="printf 'User: %s\nDirectory: %s\n'"

alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

3. Which loop is best suited to be used while you wait for a condition to become true in Bash?
Until

4. Which is the correct syntax for using variable expansion to provide a default value?  
${VARNAME:-DEFAULT_VALUE}

5. As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•	Your choice: correct -LOG=/tmp/logfile
exec 6>&1
exec > $LOG

6. Using the file command to investigate a script the following is printed:$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
The shebang specifies zsh as the script interpreter.

7. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task ?
•	Your choice: correct -search() {
    find "$2" -name "*.$1" -type f -print
}

8. You create the following script designed to print the values of multiple variables with numerical suffixes.#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
doneThe script errors on execution, how would you correct the script so it prints both variables correctly?
ANS
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done

9. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.sudo tar -cvf etc.tar /etc 2>/dev/null&

sudo tar -cvf etc.tar /etc &>/dev/null&

10. The following script has been developed by your colleague who reports that it does not always terminate when the users request:while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
doneSome users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

11. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

12. As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

13. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•	Your choice: correct -
Ease of typing

14. The output of a script should produce the following results as requested by your manager:1 2 3 4 5 6 7 8 9 10
for i in {1..10}; do echo -n "$i "; done; echo

15. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.


16. Why do you use exec redirection in a script rather than simple redirection?
All stdout or all stderr can output from the script needs to go to the same file.


17. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:LOG=/tmp/logfile
exec > $LOG
echo hello
•	Correct -
Before the exec command add the line to duplicate stdin :
exec 6>&1


18. After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•	Your choice: correct -$BASHPID

19. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?
•	Correct -
Run the which git command and if the exit is code is not 0 then git is not installed.

20.case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esacReview the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac

1.
 
A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:
cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?

HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.
2.
 
The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do

 declare -l REPLY

 read -p "Do you want to continue: y/n "

 echo "hello"

 if [ "$REPLY" == "n" ] ; then

  break

 fi

done


In Bash, what is a valid way to return non-numeric values from a function?
a.	Store non-numerical values in global variables and access them outside of the function.

4.
 
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

5.
 
What is the main difference between the $@ and the $* special parameters? 

When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

6.
 
You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.
sudo tar -cvf etc.tar /etc 2>/dev/null&


sudo tar -cvf etc.tar /etc &>/dev/null&

7.
 
Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:
LOG=/tmp/logfile
exec > $LOG
echo hello

Before the exec command add the line to duplicate stdin :
exec 6>&1

8.
 
Which loop is best suited to be used while you wait for a condition to become true in Bash?
•  Your choice: correct -
until
9.
 
You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console.
 
What function is best suited for this task ?
•  Your choice: correct -
search() {
    find "$2" -name "*.$1" -type f -print
}
10.
 
It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.
COUNT=0

while true; do

  echo $COUNT

  let "COUNT++"

  if [ "$COUNT" -gt 1000 ]; then

      break

  fi

done
11.
 
Taking into account the following function:
add_numbers() {
    local num1="$1"
    local num2="$2"
    local sum=$((num1 + num2))
    echo "The sum of $num1 and $num2 is $sum."
}
Add proper documentation and comments to the function to explain its purpose, input parameters, and expected output.

12.
 
Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
The variable greeting should be global and the variable name should be local.


13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password
14.
 
You create the following script designed to print the values of multiple variables with numerical suffixes.
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?
•  Your choice: correct -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done
15.
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
16.
 
Consider the following code:
DIR='my own dir'
mkdir $DIR
How many directories will be created using this code?
Three

17.
 
As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do

  grep '^Passwd yes' $file

done

declare -i my_var1=42



declare -a my_var2=("apple" "banana" "orange")



declare -r my_var3="Hello, World!"





# Modify the variables

my_var1=10

my_var2[1]="pear"

my_var3="Goodbye, World!"


my_var3="Goodbye, World!"

19.
 
The output of a script should produce the following results as requested by your manager:
1 2 3 4 5 6 7 8 9 10
The output should be on its own line in the console and clear of any prompt. Which solution best meets this requirement?
for i in {1..10}; do echo -n "$i "; done; echo

20.
 
You develop a script that should run code until the user chooses to quit. Having chosen to implement a while loop, which is a possible solution?
•  while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
•  

21.
 
Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
•  Your choice: correct -
The shebang specifies zsh as the script interpreter.


22.
 
What is the difference in the execution of printf with and without the -v option?
Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.

23.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

sudo useradd "$MYUSER"

24.
 
In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•  Your choice: correct -
Ease of typing

25.
 
After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•  Your choice: correct -
$BASHPID

26.
 
Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.
my_string=$'Nice day\n'
string_length=${#my_string}
echo "$string_length"

9 is the expected output because the newline character is treated as a single character

27.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

shift 2

28.
 
An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:
alias report="printf 'User: %s\nDirectory: %s\n'"
•  Your choice: correct -
alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

29.
 
As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•  Your choice: correct -
LOG=/tmp/logfile
exec 6>&1
exec > $LOG

30.
 
You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 
•  Correct -
COUNT=10
if (( COUNT > 9 ))
  then
   echo "Hello"
fi


Shell Scripting with Bash

1. Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

	sudo useradd "$MYUSER"
	
2. Which keyword is used to declare local variables within functions?

	local
	
3. Which octal value sets the following symbolic permissions?
rwxr-xr-x

	755
	
4. What is the shebang can be added to a script so it will print the execution trace for debugging purposes?

	#!/bin/bash -x
	
5. Which character is used after each option letter to indicate that the option requires an argument when using the getopts function?

	:
	
6. What is the expected behavior of the following script? 
[[ $(id -u) -eq 0 ]] && user="yes" || user="no"

echo "$user"

	Checks if the UID of the current user is equal to 0 and outputs "yes" if the UID is equal to 0 or "no" if it is not equal to 0. 
	
7. What is used with echo allows for embedded control characters?

	-e
	
8. Which is a valid Bash variable name?

	_var1
	
9. In the context of Bash scripting, which specific term is used to declare a function?

	function
	
10. l. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?

	if [ $# -ne 1 ]
	then
	  echo "Usage $0 arg1"
	  exit 2
	fi
	echo "$1"
	
11. A bash script you are analyzing prints each command before executing it and also exits immediately after a command fails.  Which commands could cause this behavior?

	set -x and set -e
	
12. You have a Bash script that sets a variable called VAR to a value of 255. You want to make this variable available to any child processes that the script spawns. How might you modify the script to achieve this task?

	export VAR
	
13. Which special parameter retrieves all parameters as a single string ?

	$*
	
14. What is the difference between the Bash operators > and >> ?

	> is used to overwrite a file and >> is used to append to a file.
	
15. You have been asked by a colleague to review the following Bash printf command as they are can't get the decimal places to print
printf '$%d\n' 123.126
What command would correctly print as currency and include just two decimal places?

	printf '$%.2f\n' 123.126
	
16. What is the difference between using the $# and $* special variables?

	The special variable $# holds the total number of arguments passed while the special variable $* holds the values of the arguments passed.
	
17. You are aware that many of your developers make use of the umask extensively when working at the command line. Over time, you notice inconsistency in the execute permission being set on scripts. Currently, to set the execute permission for all objects the following command is used:
chmod +x file.sh
To ensure consistency in setting the execute permission for all objects how should you modify the command?

	chmod a+x
	
18. Which Bash operator is used to send the output of one process to the input of another?
	
	|
	
19.
if (( $num % 2 == 0 )); then
  echo "yes"
else
  echo "no"
fi

if [[ $num -lt 0 ]]; then
  echo "yes"
elif [[ $num -gt 0 ]]; then
  echo "no"
else
  echo "neither"
fi
What would be the output of the script if the variable "num" would be 10.

	yes

	no
	
20. The special variables $* and $@ present all arguments to a script, but what is the difference between the two variables?

	$* holds all arguments in a single string and $@ as an array.
	
1. As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?

	echo -n "Enter data: "
	
2. As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?

	cat > /etc/motd <<EOF
	This a a secure system managed by example.com
	Employee access only
	EOF
	
3. The standard syntax for searching and replacing text in Bash is: f${variable/search/replace}. What is the outcome of using the following syntax: ${my_string//this/there}?

	Replaces all instances of the string this with the string there.
	
4. Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?
	
	sudo useradd "$MYUSER"
	
5. You have the following entry in your crontab file:
0 \* \* \* \* /opt/bin/server-checkup
What is the outcome of this entry ?

	The server-checkup script is run on an hourly basis.
	
6. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?

	Run the which git command and if the exit is code is not 0 then git is not installed.
	
7. You are reviewing code that populates the values of an array variable:
NAMES=('bob' 'ingrid' 'pete')
How would you correctly address the variable where 'ingrid' is stored?

	${NAMES[1]}
	
8. What can using the shift command allow you to do?

	Remove the first parameter passed to the script, allowing the second parameter to become first.
	
9. You are writing a script that expects a variable number of command line arguments, where each argument represents a filename. The script should print the contents of each file to the console, one after another. If no arguments were specified the script should return an error message. Which is the best solution for this task ?

	if [ $# -eq 0 ]; then
	  echo "Error: no filenames specified"
	  exit 1
	fi

	for file in "$@"; do
	  echo "Contents of $file:"
	  cat "$file"
	done
	
10. The script file called myscript.sh contains the following command:
echo $#
What would be the expected output of the following command:
./myscript.sh alpha beta delta

	3
	
11. How do Bash c-style and classic for loops differ?

	Classic for loops increment through a list and C-style loops provide more control though increment values.
	
12. Suppose you have the following function defined in myfunction.sh:
#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:
#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?

	#!/bin/bash
	source myfunction.sh
	greet
	
13. You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure. What script achieves this outcome?

	create_user() {
	  local username=$1
	  local password=$2
	  
	  sudo useradd -m -p $(echo $password) $username
	  
	  # Check if the user was successfully created
	  if [ $? -eq 0 ]; then
		echo "User account created successfully."
	  else
		echo "Error: failed to create user account."
	  fi
	}

	read -p "Enter a username: " username
	read -p "Enter a password: " password

	create_user $username $password
	
14. Which variable in Bash is used to represents the executing script's name?
	
	$0
	
15. What can you use exec redirection for inside of a Bash script?

	Redirection using exec allows all stdout from the script redirected to a named file.
	
16. How does a HEREDOC differ from simple stdin redirection?

	A HEREDOC specifies a block of text to be passed to the stdin of a process.
	
17. What is the correct syntax for using conditional expressions as a shortcut for if/then/else statements.

	<condition> && <if-true> || <if-false>

	[[ $age -ge 18 ]] && result="Age is greater than 18" || result="Age is below 18"
	
18. Which Bash operator is used to send the output of one process to the input of another?

	|
	
19. Which character is used to replace the test command in bash shorthand notation?

	[ ]
	
20. As a script developer, you need a script to always execute in debug mode while you are working on it. You have decided to implement a shebang to implement this with Bash. Which shebang should you choose?

	#!/bin/bash -x
	
1. You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

	read -p "Enter the filename: " ANSWER
	
2. The following script should allow for just one argument being supplied. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?

	if [ $# -ne 1 ]
	then
	  echo "Usage $0 arg1"
	  exit 2
	fi
	echo "$1"
	
3. What is the main benefit of exporting a variable?

	An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.
	
4. You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 

	COUNT=10
	if (( COUNT > 9 ))
	  then
	   echo "Hello"
	fi
	
5. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:
cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?

	HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.
	
6. Which loop is best suited to be used while you wait for a condition to become true in Bash?

	until
	
7. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

	Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.
	
8. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:
LOG=/tmp/logfile
exec > $LOG
echo hello

	Before the exec command add the line to duplicate stdin :

	exec 6>&1
	
9.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?

	case "$1" in
	  'start')
		echo "Starting"
		;;
	   'stop')
		 echo "Stopping"
		 ;;
	   *)
		echo "Usage: $0 start|stop"
		;;
	esac
	
10. Which statement is considered good practice for writing portable code?

	Use #!/bin/sh 
	
11. Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?

	The variable greeting should be global and the variable name should be local.
	
12.
declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"
Which of the commands within the script above is bound to fail?

	my_var3="Goodbye, World!"
	
13. The output of a script should produce the following results as requested by your manager:
1 2 3 4 5 6 7 8 9 10
The output should be on its own line in the console and clear of any prompt. Which solution best meets this requirement?

	for i in {1..10}; do echo -n "$i "; done; echo
	
14. What is process substitution in the Bash shell?

	Piping of the stdout of one or more processes to the stdin of another.
	
15.
check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

	if [ -z "$process_pid" ]; then
		return 1
	  else
		return $process_pid
	  fi
	  
16. What is the difference in the execution of printf with and without the -v option?

	Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.
	
17. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?

	Ease of typing
	
18. Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4  With which single command should you replace the dotted line to make output of the script correct?

	shift 2
	
19. Consider a situation where you have a shell script named "test" in your current working directory and an executable program with the same name "test" in the /usr/local/bin directory. Your PATH environment variable includes both the current working directory (.) and /usr/local/bin. You can investigate the "test" command/program with either the type or which commands? Which would be better suited for this task ?

	The type command would be more appropriate for inspecting the "test" command/program because it provides more comprehensive information about the command, indicating its type and location.
	
20. As a Linux administrator you need to create daily backup files with unique names. How can the backup file be named using temporary variables?

	backup.$(date +%F)
	
3. The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

		while true; do
		 declare -l REPLY
		 read -p "Do you want to continue: y/n "
		 echo "hello"
		 if [ "$REPLY" == "n" ] ; then
		  break
		 fi
		done
		
4. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task 

	search() {
		find "$2" -name "*.$1" -type f -print
	}
	
6. Which is the correct syntax for using variable expansion to provide a default value? 

	${VARNAME:-DEFAULT_VALUE}
	
9. Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?

	The shebang specifies zsh as the script interpreter.
	
10. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.
sudo tar -cvf etc.tar /etc 2>/dev/null&

	sudo tar -cvf etc.tar /etc &>/dev/null&
	
13. You create the following script designed to print the values of multiple variables with numerical suffixes.
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?

	#!/usr/bin/bash
	user1=bob
	user2=jane
	for arg in {1..2} ; do
	eval "echo \${user$arg}"
	done
	
15. It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.

	COUNT=0
	while true; do
	  echo $COUNT
	  let "COUNT++"
	  if [ "$COUNT" -gt 1000 ]; then
		  break
	  fi
	done
	
17. Which option for the test command is used to check that the sticky bit is set on a directory?

	-k
	
20. Consider the following code:
DIR='my own dir'
mkdir $DIR
How many directories will be created using this code?

	Three
	
22. In Bash, what is a valid way to return non-numeric values from a function?

	Store non-numerical values in global variables and access them outside of the function.

1.
 
Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?

•  The shebang specifies zsh as the script interpreter.

2.
 
The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

A : while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

3.
 
You develop a script that should run code until the user chooses to quit. Having chosen to implement a while loop, which is a possible solution?
A :
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

4.
 
Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?

A ; The variable greeting should be global and the variable name should be local.

5.
 
Which is the correct syntax for using variable expansion to provide a default value? 
${VARNAME:-DEFAULT_VALUE}
6.
 
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.
7.
 
As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
A : 
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

8.
 
After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
A ; $BASHPID

9.
declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"
Which of the commands within the script above is bound to fail?
A ; my_var3="Goodbye, World!"


10.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?

create_user() {
  local username=$1
  local password=$2
  
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: " username
read -p "Enter a password: " password

create_user $username $password


11.
 
Why do you use exec redirection in a script rather than simple redirection?
•  
•  All stdout or all stderr can output from the script needs to go to the same file.
•  
12.
 
You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 
A ; COUNT=10
if (( COUNT > 9 ))
  then
   echo "Hello"
fi

13.
 
What can using the shift command allow you to do?
•  
A ; •  Remove the first parameter passed to the script, allowing the second parameter to become first.
•  

14.
check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

A ; if [ -z "$process_pid" ]; then
    return 1
  else
    return $process_pid
  fi

15.
 
In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?

A: •  Ease of typing
•  

16.
 
Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.

A ; •  9 is the expected output because the newline character is treated as a single character
•  
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
A :
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac

18.
 
What is the difference in the execution of printf with and without the -v option?
•  
A: •  Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.
•  

19.
 
A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:

A: HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.

20.
 
Which is a preferred alternative to the which command when using Bash? 
•  
•  command -v
•  
1.
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Ans: Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

2.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
Ans: 
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
 
3.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

Ans: sudo useradd "$MYUSER"

4.
 
What is the main benefit of exporting a variable?

An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.

5.
 
Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?

Ans: It doesn't provide proper process management and logging

check_process() {

  local process_name="httpd"

  local process_pid=$(pgrep $process_name)

..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

 if [ -z "$process_pid" ]; then

    return 1

  else

    return $process_pid

  fi


Assume you have the following Bash function defined:
function myfunction {

    var1=0

    for num in "$@"; do

        if [[ $num -gt $var1 ]]; then

            var1=$num

        fi

    done

    echo $var1

}
What is the expected output of the function if you call it as stated bellow:
myfunction 16 3 17 2
17

8.
 
Why do you use exec redirection in a script rather than simple redirection?

All stdout or all stderr can output from the script needs to go to the same file.
9.
 
Which is a preferred alternative to the which command when using Bash? 

command -v

10.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

•  shift 2

11.
 
You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

read -p "Enter the filename: " ANSWER

12.
 
Which option for the test command is used to check that the sticky bit is set on a directory?
•   -k

13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password


14.
 
Why is it recommended to avoid the which command within Bash?

The which command may lead to unexpected results or may not provide complete information about a command.



What is the main difference between the $@ and the $* special parameters? 

Ans: When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

 
A Linux administrator is creating a script to run on request in a user's environment to print the process information for the current shell. Upon consideration which command provides the best flexibility?
Ans: ps -fp $$

 
As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?
Ans: echo -n "Enter data: "

How do Bash c-style and classic for loops differ?
Ans: Classic for loops increment through a list and C-style loops provide more control though increment values.

19.
#First Function
function print {

  for arg in "$@"; do

    echo "[$arg]"

  done

}
#Second Function 
function print {

  for arg in "$*"; do

    echo "[$arg]"

  done

}
Input:
print "alpha" "beta delta" "gamma"
Which of the functions above will return the following output: 
[alpha]
[beta delta]
[gamma]

Ans: The first function.

What can using the shift command allow you to do?
Ans: Remove the first parameter passed to the script, allowing the second parameter to become first.




1.declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"Which of the commands within the script above is bound to fail?
•	Your choice: correct -my_var3="Goodbye, World!"

2. An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:alias report="printf 'User: %s\nDirectory: %s\n'"

alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

3. Which loop is best suited to be used while you wait for a condition to become true in Bash?
Until

4. Which is the correct syntax for using variable expansion to provide a default value?  
${VARNAME:-DEFAULT_VALUE}

5. As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•	Your choice: correct -LOG=/tmp/logfile
exec 6>&1
exec > $LOG

6. Using the file command to investigate a script the following is printed:$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
The shebang specifies zsh as the script interpreter.

7. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task ?
•	Your choice: correct -search() {
    find "$2" -name "*.$1" -type f -print
}

8. You create the following script designed to print the values of multiple variables with numerical suffixes.#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
doneThe script errors on execution, how would you correct the script so it prints both variables correctly?
ANS
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done

9. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.sudo tar -cvf etc.tar /etc 2>/dev/null&

sudo tar -cvf etc.tar /etc &>/dev/null&

10. The following script has been developed by your colleague who reports that it does not always terminate when the users request:while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
doneSome users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

11. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

12. As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

13. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•	Your choice: correct -
Ease of typing

14. The output of a script should produce the following results as requested by your manager:1 2 3 4 5 6 7 8 9 10
for i in {1..10}; do echo -n "$i "; done; echo

15. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.


16. Why do you use exec redirection in a script rather than simple redirection?
All stdout or all stderr can output from the script needs to go to the same file.


17. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:LOG=/tmp/logfile
exec > $LOG
echo hello
•	Correct -
Before the exec command add the line to duplicate stdin :
exec 6>&1


18. After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•	Your choice: correct -$BASHPID

19. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?
•	Correct -
Run the which git command and if the exit is code is not 0 then git is not installed.

20.case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esacReview the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac



1.
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Ans: Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

2.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
Ans: 
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
 
3.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

Ans: sudo useradd "$MYUSER"

4.
 
What is the main benefit of exporting a variable?

An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.

5.
 
Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?

Ans: It doesn't provide proper process management and logging

check_process() {

  local process_name="httpd"

  local process_pid=$(pgrep $process_name)

..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

 if [ -z "$process_pid" ]; then

    return 1

  else

    return $process_pid

  fi


Assume you have the following Bash function defined:
function myfunction {

    var1=0

    for num in "$@"; do

        if [[ $num -gt $var1 ]]; then

            var1=$num

        fi

    done

    echo $var1

}
What is the expected output of the function if you call it as stated bellow:
myfunction 16 3 17 2
17

8.
 
Why do you use exec redirection in a script rather than simple redirection?

All stdout or all stderr can output from the script needs to go to the same file.
9.
 
Which is a preferred alternative to the which command when using Bash? 

command -v

10.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

•  shift 2

11.
 
You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

read -p "Enter the filename: " ANSWER

12.
 
Which option for the test command is used to check that the sticky bit is set on a directory?
•   -k

13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password


14.
 
Why is it recommended to avoid the which command within Bash?

The which command may lead to unexpected results or may not provide complete information about a command.



What is the main difference between the $@ and the $* special parameters? 

Ans: When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

 
A Linux administrator is creating a script to run on request in a user's environment to print the process information for the current shell. Upon consideration which command provides the best flexibility?
Ans: ps -fp $$

 
As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?
Ans: echo -n "Enter data: "

How do Bash c-style and classic for loops differ?
Ans: Classic for loops increment through a list and C-style loops provide more control though increment values.

19.
#First Function
function print {

  for arg in "$@"; do

    echo "[$arg]"

  done

}
#Second Function 
function print {

  for arg in "$*"; do

    echo "[$arg]"

  done

}
Input:
print "alpha" "beta delta" "gamma"
Which of the functions above will return the following output: 
[alpha]
[beta delta]
[gamma]

Ans: The first function.

What can using the shift command allow you to do?
Ans: Remove the first parameter passed to the script, allowing the second parameter to become first.




1.declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"Which of the commands within the script above is bound to fail?
•	Your choice: correct -my_var3="Goodbye, World!"

2. An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:alias report="printf 'User: %s\nDirectory: %s\n'"

alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

3. Which loop is best suited to be used while you wait for a condition to become true in Bash?
Until

4. Which is the correct syntax for using variable expansion to provide a default value?  
${VARNAME:-DEFAULT_VALUE}

5. As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•	Your choice: correct -LOG=/tmp/logfile
exec 6>&1
exec > $LOG

6. Using the file command to investigate a script the following is printed:$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
The shebang specifies zsh as the script interpreter.

7. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task ?
•	Your choice: correct -search() {
    find "$2" -name "*.$1" -type f -print
}

8. You create the following script designed to print the values of multiple variables with numerical suffixes.#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
doneThe script errors on execution, how would you correct the script so it prints both variables correctly?
ANS
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done

9. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.sudo tar -cvf etc.tar /etc 2>/dev/null&

sudo tar -cvf etc.tar /etc &>/dev/null&

10. The following script has been developed by your colleague who reports that it does not always terminate when the users request:while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
doneSome users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

11. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

12. As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

13. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•	Your choice: correct -
Ease of typing

14. The output of a script should produce the following results as requested by your manager:1 2 3 4 5 6 7 8 9 10
for i in {1..10}; do echo -n "$i "; done; echo

15. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.


16. Why do you use exec redirection in a script rather than simple redirection?
All stdout or all stderr can output from the script needs to go to the same file.


17. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:LOG=/tmp/logfile
exec > $LOG
echo hello
•	Correct -
Before the exec command add the line to duplicate stdin :
exec 6>&1


18. After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•	Your choice: correct -$BASHPID

19. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?
•	Correct -
Run the which git command and if the exit is code is not 0 then git is not installed.

20.case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esacReview the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac

1.
 
A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:
cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?

HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.
2.
 
The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do

 declare -l REPLY

 read -p "Do you want to continue: y/n "

 echo "hello"

 if [ "$REPLY" == "n" ] ; then

  break

 fi

done


In Bash, what is a valid way to return non-numeric values from a function?
a.	Store non-numerical values in global variables and access them outside of the function.

4.
 
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

5.
 
What is the main difference between the $@ and the $* special parameters? 

When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

6.
 
You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.
sudo tar -cvf etc.tar /etc 2>/dev/null&


sudo tar -cvf etc.tar /etc &>/dev/null&

7.
 
Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:
LOG=/tmp/logfile
exec > $LOG
echo hello

Before the exec command add the line to duplicate stdin :
exec 6>&1

8.
 
Which loop is best suited to be used while you wait for a condition to become true in Bash?
•  Your choice: correct -
until
9.
 
You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console.
 
What function is best suited for this task ?
•  Your choice: correct -
search() {
    find "$2" -name "*.$1" -type f -print
}
10.
 
It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.
COUNT=0

while true; do

  echo $COUNT

  let "COUNT++"

  if [ "$COUNT" -gt 1000 ]; then

      break

  fi

done
11.
 
Taking into account the following function:
add_numbers() {
    local num1="$1"
    local num2="$2"
    local sum=$((num1 + num2))
    echo "The sum of $num1 and $num2 is $sum."
}
Add proper documentation and comments to the function to explain its purpose, input parameters, and expected output.

12.
 
Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
The variable greeting should be global and the variable name should be local.


13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password
14.
 
You create the following script designed to print the values of multiple variables with numerical suffixes.
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?
•  Your choice: correct -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done
15.
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
16.
 
Consider the following code:
DIR='my own dir'
mkdir $DIR
How many directories will be created using this code?
Three

17.
 
As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do

  grep '^Passwd yes' $file

done

declare -i my_var1=42



declare -a my_var2=("apple" "banana" "orange")



declare -r my_var3="Hello, World!"





# Modify the variables

my_var1=10

my_var2[1]="pear"

my_var3="Goodbye, World!"


my_var3="Goodbye, World!"

19.
 
The output of a script should produce the following results as requested by your manager:
1 2 3 4 5 6 7 8 9 10
The output should be on its own line in the console and clear of any prompt. Which solution best meets this requirement?
for i in {1..10}; do echo -n "$i "; done; echo

20.
 
You develop a script that should run code until the user chooses to quit. Having chosen to implement a while loop, which is a possible solution?
•  while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
•  

21.
 
Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
•  Your choice: correct -
The shebang specifies zsh as the script interpreter.


22.
 
What is the difference in the execution of printf with and without the -v option?
Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.

23.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

sudo useradd "$MYUSER"

24.
 
In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•  Your choice: correct -
Ease of typing

25.
 
After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•  Your choice: correct -
$BASHPID

26.
 
Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.
my_string=$'Nice day\n'
string_length=${#my_string}
echo "$string_length"

9 is the expected output because the newline character is treated as a single character

27.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

shift 2

28.
 
An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:
alias report="printf 'User: %s\nDirectory: %s\n'"
•  Your choice: correct -
alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

29.
 
As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•  Your choice: correct -
LOG=/tmp/logfile
exec 6>&1
exec > $LOG

30.
 
You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 
•  Correct -
COUNT=10
if (( COUNT > 9 ))
  then
   echo "Hello"
fi


1. Consider the following code:
DIR='my own dir'
mkdir $DIR
How many directories will be created using this code?
Your choice: incorrect -
One

Correct -
Three

Incorrect -
Zero

Incorrect -
Two

Incorrect -
I don't know yet.

Is something wrong with the question?

Question was not answered in the time given. Recorded as incorrect.
2.

check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

2.
check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 
Correct -
  if [ -z "$process_pid" ]; then
    return 1
  else
    return $process_pid
  fi
Incorrect -
  if [ -z "$process_pid" ]; then
    return $process_pid 
  else
    return 1
  fi 
Incorrect -
if [ -z "$process_pid" ]; then
    return 0 
else
    return $process_pid
fi  
Incorrect -
if [ -eq "$process_pid" ]; then
    return $process_pid 
else
    return 1
fi  
Incorrect -
I don't know yet.

Is something wrong with the question?

3.

You need to redirect all output from a backup allowing the command to run in the background. There is no requirement for the output to be retained as the backup is all that is required. What would you do to achieve a successful backup of the /etc directory meeting these requirements?

3. You need to redirect all output from a backup allowing the command to run in the background. There is no requirement for the output to be retained as the backup is all that is required. What would you do to achieve a successful backup of the /etc directory meeting these requirements?
Your choice: correct -
sudo tar -cvf etc.tar /etc &> /dev/null
Incorrect -
sudo tar -cvf etc.tar /etc 2> /dev/null
Incorrect -
sudo tar -cvf etc.tar /etc 1> /dev/null
Incorrect -
sudo tar -cvf etc.tar /etc &> /etc/log
Incorrect -
I don't know yet.

Is something wrong with the question?

4.

You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 

4. You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 
Your choice: incorrect -
COUNT=10
if [ COUNT > 9 ]
  then
   echo "Hello"
fi
Correct -
COUNT=10
if (( COUNT > 9 ))
  then
   echo "Hello"
fi
Incorrect -
COUNT=10
if [[ COUNT > 9 ]]
  then
   echo "Hello"
fi
Incorrect -
COUNT=10
if (( COUNT < 9 ))
  then
   echo "Hello"
fi
Incorrect -
I don't know yet.

Is something wrong with the question?

5.

Which variable is used by Bash builtin read command to store the response if the name of the variable is not included in the code?

5. Which variable is used by Bash builtin read command to store the response if the name of the variable is not included in the code?
Incorrect -
RESPONSE

Incorrect -
ANSWER

Your choice: correct -
REPLY

Incorrect -
READ

Incorrect -
I don't know yet.

Is something wrong with the question?

6.

As a Linux administrator you need to create daily backup files with unique names. How can the backup file be named using temporary variables?

6. As a Linux administrator you need to create daily backup files with unique names. How can the backup file be named using temporary variables?
Incorrect -
backup.${date +%F}
Your choice: correct -
backup.$(date +%F)
Incorrect -
backup.$'date +%F'

Incorrect -
backup.$[date +%F]

Incorrect -
I don't know yet.

Is something wrong with the question?

7.

As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?

7. As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?
Incorrect -
cat > /etc/motd <<<EOF
This a a secure system managed by example.com
Employee access only
<<<EOF
Your choice: correct -
cat > /etc/motd <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Incorrect -
cat <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Incorrect -
read > /etc/motd <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Incorrect -
I don't know yet.

Is something wrong with the question?

8.

What is a key reason for using the declare command to create variables within bash?

8. What is a key reason for using the declare command to create variables within bash?
Incorrect -
Using the declare command is limited to creating global variables.

Your choice: correct -
Using declare allows you to explicitly specify the variable's attributes.

Incorrect -
Using the declare command makes all variables persistent.

Incorrect -
There is no significant reason for using the declare command within bash because we can name them instead.

Incorrect -
I don't know yet.

Is something wrong with the question?

9.

case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?

9.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
Your choice: correct -
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac
Incorrect -
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   ! in start||stop)
    echo "Usage: $0 start|stop"
    ;;
esac
Incorrect -
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
   exit 1
esac
Incorrect -
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   [start|stop])
    echo "Usage: $0 start|stop"
    ;;
esac
Incorrect -
I don't know yet.

Is something wrong with the question?

10.

declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"
Which of the commands within the script above is bound to fail?

10.
declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"
Which of the commands within the script above is bound to fail?
Incorrect -
my_var2[1]="pear"
Your choice: correct -
my_var3="Goodbye, World!"
Incorrect -
my_var1=10
Incorrect -
declare -a my_var2=("apple" "banana" "orange")
Incorrect -
I don't know yet.

Is something wrong with the question?

11.

As a system administrator, you would like to check if the program git is installed within the system's PATH.

How best can you accomplish this task?

11. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?
Incorrect -
Run the locate git command and if the exit is code is not 0 then git is not installed. 

Your choice: correct -
Run the which git command and if the exit is code is not 0 then git is not installed.

Incorrect -
Run the locate git command and if the exit is code is not 0 then git is installed.

Incorrect -
Run the which git command and if the exit is code is 0 then git is not installed.

Incorrect -
I don't know yet.

Is something wrong with the question?

12.

Which is a preferred alternative to the which command when using Bash? 

12. Which is a preferred alternative to the which command when using Bash? 
Your choice: correct -
command -v
Incorrect -
find
Incorrect -
declare
Incorrect -
locate
Incorrect -
I don't know yet.

Is something wrong with the question?

13.

Why is it recommended to avoid the which command within Bash?

13. Why is it recommended to avoid the which command within Bash?
Incorrect -
The which command only searches for shell built-ins, aliases, or functions.

Incorrect -
There is no reason to avoid the which command when using Bash.

Incorrect -
The which command only gives details on the type of the command.

Your choice: correct -
The which command may lead to unexpected results or may not provide complete information about a command.

Incorrect -
I don't know yet.

Is something wrong with the question?

14.

Taking into account the following function:

add_numbers() {
    local num1="$1"
    local num2="$2"
    local sum=$((num1 + num2))
    echo "The sum of $num1 and $num2 is $sum."
}
How would you improve this function to ensure better error handling and code maintainability?

14. Taking into account the following function:
add_numbers() {
    local num1="$1"
    local num2="$2"
    local sum=$((num1 + num2))
    echo "The sum of $num1 and $num2 is $sum."
}
How would you improve this function to ensure better error handling and code maintainability?
Incorrect -
One potential improvement to this function could be use global variables instead of local ones.

Your choice: incorrect -
One potential improvement to this function could be to add error handling logic to handle cases where the input parameters are not valid numbers.

Incorrect -
There are no potential improvements to this function, as it is already flawless.

Correct -
Add proper documentation and comments to the function to explain its purpose, input parameters, and expected output.

Incorrect -
I don't know yet.

Is something wrong with the question?

15.

You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console.

What function is best suited for this task ?

15. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task ?
Your choice: correct -
search() {
    find "$2" -name "*.$1" -type f -print
}
Incorrect -
search() {
    find "$1" -name "*.$2" -type f -print
}
Incorrect -
search() {
    find "$0" -name "*.$2" -type f -print
} 
Incorrect -
search {
    find "$1" -name "*.$2" -type f -print
} 
Incorrect -
I don't know yet.

Is something wrong with the question?

16.

You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:

#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

16. You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?
Your choice: correct -
read -p "Enter the filename: " ANSWER
Incorrect -
read -p "Enter the filename: " -v ANSWER
Incorrect -
read -p "Enter the filename: " =ANSWER
Incorrect -
read -p "Enter the filename: " $ANSWER
Incorrect -
I don't know yet.

Is something wrong with the question?

Question was not answered in the time given. Recorded as incorrect.
17.

How do Bash c-style and classic for loops differ?

17. How do Bash c-style and classic for loops differ?
Incorrect -
C-style for loops increment through a list and classic loops provide more control though increment values.

Correct -
Classic for loops increment through a list and C-style loops provide more control though increment values.

Incorrect -
Classic for loops increment through a list and C-style loops increment array values

Incorrect -
Classic for loops increment through a list and C-style loops provide less control and are more simple.

Incorrect -
I don't know yet.

Is something wrong with the question?

18.

As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?

18. As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?
Your choice: correct -
echo -n "Enter data: "
Incorrect -
echo -v "Enter data: "
Incorrect -
echo -e "Enter data: "
Incorrect -
echo --suppress "Enter data: " 
Incorrect -
I don't know yet.

Is something wrong with the question?

19.

Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

19. Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?
Incorrect -
sudo useradd ${MYUSER}
Your choice: correct -
sudo useradd "$MYUSER"
Incorrect -
sudo useradd $MYUSER
Incorrect -
sudo useradd '$MYUSER'
Incorrect -
I don't know yet.

Is something wrong with the question?

20.

You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.

What script achieves this outcome?

20. You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure. What script achieves this outcome?
Your choice: incorrect -
create_user() {
  global username=$1
  global password=$2
  
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: " username
read -p "Enter a password: " password

create_user $username $password
Incorrect -
create_user() {
  local username=$1
  local password=$2
  
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: "
read -p "Enter a password: "

create_user $username $password 
Correct -
create_user() {
  local username=$1
  local password=$2
  
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: " username
read -p "Enter a password: " password

create_user $username $password
Incorrect -
create_user() {
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: " username
read -p "Enter a password: " password
local username=$1
local password=$2  

create_user $username $password 
Incorrect -
I don't know yet.

Is something wrong with the question?

21.

What can using the shift command allow you to do?

21. What can using the shift command allow you to do?
Incorrect -
Remember the first parameter passed to the script.

Your choice: correct -
Remove the first parameter passed to the script, allowing the second parameter to become first.

Incorrect -
Ignore the first parameter passed to a script while still remembering it within the array.

Incorrect -
Switch between the first and second parameters passed to a script.

Incorrect -
I don't know yet.

Is something wrong with the question?

22.

What command is used to declare an integer variable?

22. What command is used to declare an integer variable?
Incorrect -
integer

Your choice: correct -
declare -i

Incorrect -
var -i

Incorrect -
declare -integer

Incorrect -
I don't know yet.

Is something wrong with the question?

23.

Which character is used to replace the test command in bash shorthand notation?

23. Which character is used to replace the test command in bash shorthand notation?
Your choice: correct -
[ ]

Incorrect -
| |

Incorrect -
{ }

Incorrect -
\ \

Incorrect -
I don't know yet.

Is something wrong with the question?

Shell Scripting with Bash

1. Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

	sudo useradd "$MYUSER"
	
2. Which keyword is used to declare local variables within functions?

	local
	
3. Which octal value sets the following symbolic permissions?
rwxr-xr-x

	755
	
4. What is the shebang can be added to a script so it will print the execution trace for debugging purposes?

	#!/bin/bash -x
	
5. Which character is used after each option letter to indicate that the option requires an argument when using the getopts function?

	:
	
6. What is the expected behavior of the following script? 
[[ $(id -u) -eq 0 ]] && user="yes" || user="no"

echo "$user"

	Checks if the UID of the current user is equal to 0 and outputs "yes" if the UID is equal to 0 or "no" if it is not equal to 0. 
	
7. What is used with echo allows for embedded control characters?

	-e
	
8. Which is a valid Bash variable name?

	_var1
	
9. In the context of Bash scripting, which specific term is used to declare a function?

	function
	
10. l. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?

	if [ $# -ne 1 ]
	then
	  echo "Usage $0 arg1"
	  exit 2
	fi
	echo "$1"
	
11. A bash script you are analyzing prints each command before executing it and also exits immediately after a command fails.  Which commands could cause this behavior?

	set -x and set -e
	
12. You have a Bash script that sets a variable called VAR to a value of 255. You want to make this variable available to any child processes that the script spawns. How might you modify the script to achieve this task?

	export VAR
	
13. Which special parameter retrieves all parameters as a single string ?

	$*
	
14. What is the difference between the Bash operators > and >> ?

	> is used to overwrite a file and >> is used to append to a file.
	
15. You have been asked by a colleague to review the following Bash printf command as they are can't get the decimal places to print
printf '$%d\n' 123.126
What command would correctly print as currency and include just two decimal places?

	printf '$%.2f\n' 123.126
	
16. What is the difference between using the $# and $* special variables?

	The special variable $# holds the total number of arguments passed while the special variable $* holds the values of the arguments passed.
	
17. You are aware that many of your developers make use of the umask extensively when working at the command line. Over time, you notice inconsistency in the execute permission being set on scripts. Currently, to set the execute permission for all objects the following command is used:
chmod +x file.sh
To ensure consistency in setting the execute permission for all objects how should you modify the command?

	chmod a+x
	
18. Which Bash operator is used to send the output of one process to the input of another?
	
	|
	
19.
if (( $num % 2 == 0 )); then
  echo "yes"
else
  echo "no"
fi

if [[ $num -lt 0 ]]; then
  echo "yes"
elif [[ $num -gt 0 ]]; then
  echo "no"
else
  echo "neither"
fi
What would be the output of the script if the variable "num" would be 10.

	yes

	no
	
20. The special variables $* and $@ present all arguments to a script, but what is the difference between the two variables?

	$* holds all arguments in a single string and $@ as an array.
	
1. As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?

	echo -n "Enter data: "
	
2. As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?

	cat > /etc/motd <<EOF
	This a a secure system managed by example.com
	Employee access only
	EOF
	
3. The standard syntax for searching and replacing text in Bash is: f${variable/search/replace}. What is the outcome of using the following syntax: ${my_string//this/there}?

	Replaces all instances of the string this with the string there.
	
4. Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?
	
	sudo useradd "$MYUSER"
	
5. You have the following entry in your crontab file:
0 \* \* \* \* /opt/bin/server-checkup
What is the outcome of this entry ?

	The server-checkup script is run on an hourly basis.
	
6. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?

	Run the which git command and if the exit is code is not 0 then git is not installed.
	
7. You are reviewing code that populates the values of an array variable:
NAMES=('bob' 'ingrid' 'pete')
How would you correctly address the variable where 'ingrid' is stored?

	${NAMES[1]}
	
8. What can using the shift command allow you to do?

	Remove the first parameter passed to the script, allowing the second parameter to become first.
	
9. You are writing a script that expects a variable number of command line arguments, where each argument represents a filename. The script should print the contents of each file to the console, one after another. If no arguments were specified the script should return an error message. Which is the best solution for this task ?

	if [ $# -eq 0 ]; then
	  echo "Error: no filenames specified"
	  exit 1
	fi

	for file in "$@"; do
	  echo "Contents of $file:"
	  cat "$file"
	done
	
10. The script file called myscript.sh contains the following command:
echo $#
What would be the expected output of the following command:
./myscript.sh alpha beta delta

	3
	
11. How do Bash c-style and classic for loops differ?

	Classic for loops increment through a list and C-style loops provide more control though increment values.
	
12. Suppose you have the following function defined in myfunction.sh:
#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:
#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?

	#!/bin/bash
	source myfunction.sh
	greet
	
13. You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure. What script achieves this outcome?

	create_user() {
	  local username=$1
	  local password=$2
	  
	  sudo useradd -m -p $(echo $password) $username
	  
	  # Check if the user was successfully created
	  if [ $? -eq 0 ]; then
		echo "User account created successfully."
	  else
		echo "Error: failed to create user account."
	  fi
	}

	read -p "Enter a username: " username
	read -p "Enter a password: " password

	create_user $username $password
	
14. Which variable in Bash is used to represents the executing script's name?
	
	$0
	
15. What can you use exec redirection for inside of a Bash script?

	Redirection using exec allows all stdout from the script redirected to a named file.
	
16. How does a HEREDOC differ from simple stdin redirection?

	A HEREDOC specifies a block of text to be passed to the stdin of a process.
	
17. What is the correct syntax for using conditional expressions as a shortcut for if/then/else statements.

	<condition> && <if-true> || <if-false>

	[[ $age -ge 18 ]] && result="Age is greater than 18" || result="Age is below 18"
	
18. Which Bash operator is used to send the output of one process to the input of another?

	|
	
19. Which character is used to replace the test command in bash shorthand notation?

	[ ]
	
20. As a script developer, you need a script to always execute in debug mode while you are working on it. You have decided to implement a shebang to implement this with Bash. Which shebang should you choose?

	#!/bin/bash -x
	
1. You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

	read -p "Enter the filename: " ANSWER
	
2. The following script should allow for just one argument being supplied. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?

	if [ $# -ne 1 ]
	then
	  echo "Usage $0 arg1"
	  exit 2
	fi
	echo "$1"
	
3. What is the main benefit of exporting a variable?

	An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.
	
4. You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 

	COUNT=10
	if (( COUNT > 9 ))
	  then
	   echo "Hello"
	fi
	
5. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:
cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?

	HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.
	
6. Which loop is best suited to be used while you wait for a condition to become true in Bash?

	until
	
7. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

	Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.
	
8. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:
LOG=/tmp/logfile
exec > $LOG
echo hello

	Before the exec command add the line to duplicate stdin :

	exec 6>&1
	
9.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?

	case "$1" in
	  'start')
		echo "Starting"
		;;
	   'stop')
		 echo "Stopping"
		 ;;
	   *)
		echo "Usage: $0 start|stop"
		;;
	esac
	
10. Which statement is considered good practice for writing portable code?

	Use #!/bin/sh 
	
11. Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?

	The variable greeting should be global and the variable name should be local.
	
12.
declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"
Which of the commands within the script above is bound to fail?

	my_var3="Goodbye, World!"
	
13. The output of a script should produce the following results as requested by your manager:
1 2 3 4 5 6 7 8 9 10
The output should be on its own line in the console and clear of any prompt. Which solution best meets this requirement?

	for i in {1..10}; do echo -n "$i "; done; echo
	
14. What is process substitution in the Bash shell?

	Piping of the stdout of one or more processes to the stdin of another.
	
15.
check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

	if [ -z "$process_pid" ]; then
		return 1
	  else
		return $process_pid
	  fi
	  
16. What is the difference in the execution of printf with and without the -v option?

	Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.
	
17. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?

	Ease of typing
	
18. Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4  With which single command should you replace the dotted line to make output of the script correct?

	shift 2
	
19. Consider a situation where you have a shell script named "test" in your current working directory and an executable program with the same name "test" in the /usr/local/bin directory. Your PATH environment variable includes both the current working directory (.) and /usr/local/bin. You can investigate the "test" command/program with either the type or which commands? Which would be better suited for this task ?

	The type command would be more appropriate for inspecting the "test" command/program because it provides more comprehensive information about the command, indicating its type and location.
	
20. As a Linux administrator you need to create daily backup files with unique names. How can the backup file be named using temporary variables?

	backup.$(date +%F)
	
3. The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

		while true; do
		 declare -l REPLY
		 read -p "Do you want to continue: y/n "
		 echo "hello"
		 if [ "$REPLY" == "n" ] ; then
		  break
		 fi
		done
		
4. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task 

	search() {
		find "$2" -name "*.$1" -type f -print
	}
	
6. Which is the correct syntax for using variable expansion to provide a default value? 

	${VARNAME:-DEFAULT_VALUE}
	
9. Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?

	The shebang specifies zsh as the script interpreter.
	
10. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.
sudo tar -cvf etc.tar /etc 2>/dev/null&

	sudo tar -cvf etc.tar /etc &>/dev/null&
	
13. You create the following script designed to print the values of multiple variables with numerical suffixes.
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?

	#!/usr/bin/bash
	user1=bob
	user2=jane
	for arg in {1..2} ; do
	eval "echo \${user$arg}"
	done
	
15. It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.

	COUNT=0
	while true; do
	  echo $COUNT
	  let "COUNT++"
	  if [ "$COUNT" -gt 1000 ]; then
		  break
	  fi
	done
	
17. Which option for the test command is used to check that the sticky bit is set on a directory?

	-k
	
20. Consider the following code:
DIR='my own dir'
mkdir $DIR
How many directories will be created using this code?

	Three
	
22. In Bash, what is a valid way to return non-numeric values from a function?

	Store non-numerical values in global variables and access them outside of the function.

1.
 
Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?

•  The shebang specifies zsh as the script interpreter.

2.
 
The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

A : while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

3.
 
You develop a script that should run code until the user chooses to quit. Having chosen to implement a while loop, which is a possible solution?
A :
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

4.
 
Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?

A ; The variable greeting should be global and the variable name should be local.

5.
 
Which is the correct syntax for using variable expansion to provide a default value? 
${VARNAME:-DEFAULT_VALUE}
6.
 
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.
7.
 
As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
A : 
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

8.
 
After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
A ; $BASHPID

9.
declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"
Which of the commands within the script above is bound to fail?
A ; my_var3="Goodbye, World!"


10.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?

create_user() {
  local username=$1
  local password=$2
  
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: " username
read -p "Enter a password: " password

create_user $username $password


11.
 
Why do you use exec redirection in a script rather than simple redirection?
•  
•  All stdout or all stderr can output from the script needs to go to the same file.
•  
12.
 
You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 
A ; COUNT=10
if (( COUNT > 9 ))
  then
   echo "Hello"
fi

13.
 
What can using the shift command allow you to do?
•  
A ; •  Remove the first parameter passed to the script, allowing the second parameter to become first.
•  

14.
check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

A ; if [ -z "$process_pid" ]; then
    return 1
  else
    return $process_pid
  fi

15.
 
In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?

A: •  Ease of typing
•  

16.
 
Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.

A ; •  9 is the expected output because the newline character is treated as a single character
•  
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
A :
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac

18.
 
What is the difference in the execution of printf with and without the -v option?
•  
A: •  Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.
•  

19.
 
A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:

A: HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.

20.
 
Which is a preferred alternative to the which command when using Bash? 
•  
•  command -v
•  
1.
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Ans: Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

2.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
Ans: 
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
 
3.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

Ans: sudo useradd "$MYUSER"

4.
 
What is the main benefit of exporting a variable?

An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.

5.
 
Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?

Ans: It doesn't provide proper process management and logging

check_process() {

  local process_name="httpd"

  local process_pid=$(pgrep $process_name)

..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

 if [ -z "$process_pid" ]; then

    return 1

  else

    return $process_pid

  fi


Assume you have the following Bash function defined:
function myfunction {

    var1=0

    for num in "$@"; do

        if [[ $num -gt $var1 ]]; then

            var1=$num

        fi

    done

    echo $var1

}
What is the expected output of the function if you call it as stated bellow:
myfunction 16 3 17 2
17

8.
 
Why do you use exec redirection in a script rather than simple redirection?

All stdout or all stderr can output from the script needs to go to the same file.
9.
 
Which is a preferred alternative to the which command when using Bash? 

command -v

10.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

•  shift 2

11.
 
You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

read -p "Enter the filename: " ANSWER

12.
 
Which option for the test command is used to check that the sticky bit is set on a directory?
•   -k

13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password


14.
 
Why is it recommended to avoid the which command within Bash?

The which command may lead to unexpected results or may not provide complete information about a command.



What is the main difference between the $@ and the $* special parameters? 

Ans: When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

 
A Linux administrator is creating a script to run on request in a user's environment to print the process information for the current shell. Upon consideration which command provides the best flexibility?
Ans: ps -fp $$

 
As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?
Ans: echo -n "Enter data: "

How do Bash c-style and classic for loops differ?
Ans: Classic for loops increment through a list and C-style loops provide more control though increment values.

19.
#First Function
function print {

  for arg in "$@"; do

    echo "[$arg]"

  done

}
#Second Function 
function print {

  for arg in "$*"; do

    echo "[$arg]"

  done

}
Input:
print "alpha" "beta delta" "gamma"
Which of the functions above will return the following output: 
[alpha]
[beta delta]
[gamma]

Ans: The first function.

What can using the shift command allow you to do?
Ans: Remove the first parameter passed to the script, allowing the second parameter to become first.




1.declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"Which of the commands within the script above is bound to fail?
•	Your choice: correct -my_var3="Goodbye, World!"

2. An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:alias report="printf 'User: %s\nDirectory: %s\n'"

alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

3. Which loop is best suited to be used while you wait for a condition to become true in Bash?
Until

4. Which is the correct syntax for using variable expansion to provide a default value?  
${VARNAME:-DEFAULT_VALUE}

5. As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•	Your choice: correct -LOG=/tmp/logfile
exec 6>&1
exec > $LOG

6. Using the file command to investigate a script the following is printed:$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
The shebang specifies zsh as the script interpreter.

7. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task ?
•	Your choice: correct -search() {
    find "$2" -name "*.$1" -type f -print
}

8. You create the following script designed to print the values of multiple variables with numerical suffixes.#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
doneThe script errors on execution, how would you correct the script so it prints both variables correctly?
ANS
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done

9. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.sudo tar -cvf etc.tar /etc 2>/dev/null&

sudo tar -cvf etc.tar /etc &>/dev/null&

10. The following script has been developed by your colleague who reports that it does not always terminate when the users request:while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
doneSome users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

11. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

12. As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

13. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•	Your choice: correct -
Ease of typing

14. The output of a script should produce the following results as requested by your manager:1 2 3 4 5 6 7 8 9 10
for i in {1..10}; do echo -n "$i "; done; echo

15. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.


16. Why do you use exec redirection in a script rather than simple redirection?
All stdout or all stderr can output from the script needs to go to the same file.


17. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:LOG=/tmp/logfile
exec > $LOG
echo hello
•	Correct -
Before the exec command add the line to duplicate stdin :
exec 6>&1


18. After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•	Your choice: correct -$BASHPID

19. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?
•	Correct -
Run the which git command and if the exit is code is not 0 then git is not installed.

20.case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esacReview the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac



1.
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Ans: Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

2.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
Ans: 
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
 
3.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

Ans: sudo useradd "$MYUSER"

4.
 
What is the main benefit of exporting a variable?

An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.

5.
 
Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?

Ans: It doesn't provide proper process management and logging

check_process() {

  local process_name="httpd"

  local process_pid=$(pgrep $process_name)

..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

 if [ -z "$process_pid" ]; then

    return 1

  else

    return $process_pid

  fi


Assume you have the following Bash function defined:
function myfunction {

    var1=0

    for num in "$@"; do

        if [[ $num -gt $var1 ]]; then

            var1=$num

        fi

    done

    echo $var1

}
What is the expected output of the function if you call it as stated bellow:
myfunction 16 3 17 2
17

8.
 
Why do you use exec redirection in a script rather than simple redirection?

All stdout or all stderr can output from the script needs to go to the same file.
9.
 
Which is a preferred alternative to the which command when using Bash? 

command -v

10.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

•  shift 2

11.
 
You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

read -p "Enter the filename: " ANSWER

12.
 
Which option for the test command is used to check that the sticky bit is set on a directory?
•   -k

13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password


14.
 
Why is it recommended to avoid the which command within Bash?

The which command may lead to unexpected results or may not provide complete information about a command.



What is the main difference between the $@ and the $* special parameters? 

Ans: When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

 
A Linux administrator is creating a script to run on request in a user's environment to print the process information for the current shell. Upon consideration which command provides the best flexibility?
Ans: ps -fp $$

 
As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?
Ans: echo -n "Enter data: "

How do Bash c-style and classic for loops differ?
Ans: Classic for loops increment through a list and C-style loops provide more control though increment values.

19.
#First Function
function print {

  for arg in "$@"; do

    echo "[$arg]"

  done

}
#Second Function 
function print {

  for arg in "$*"; do

    echo "[$arg]"

  done

}
Input:
print "alpha" "beta delta" "gamma"
Which of the functions above will return the following output: 
[alpha]
[beta delta]
[gamma]

Ans: The first function.

What can using the shift command allow you to do?
Ans: Remove the first parameter passed to the script, allowing the second parameter to become first.




1.declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"Which of the commands within the script above is bound to fail?
•	Your choice: correct -my_var3="Goodbye, World!"

2. An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:alias report="printf 'User: %s\nDirectory: %s\n'"

alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

3. Which loop is best suited to be used while you wait for a condition to become true in Bash?
Until

4. Which is the correct syntax for using variable expansion to provide a default value?  
${VARNAME:-DEFAULT_VALUE}

5. As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•	Your choice: correct -LOG=/tmp/logfile
exec 6>&1
exec > $LOG

6. Using the file command to investigate a script the following is printed:$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
The shebang specifies zsh as the script interpreter.

7. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task ?
•	Your choice: correct -search() {
    find "$2" -name "*.$1" -type f -print
}

8. You create the following script designed to print the values of multiple variables with numerical suffixes.#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
doneThe script errors on execution, how would you correct the script so it prints both variables correctly?
ANS
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done

9. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.sudo tar -cvf etc.tar /etc 2>/dev/null&

sudo tar -cvf etc.tar /etc &>/dev/null&

10. The following script has been developed by your colleague who reports that it does not always terminate when the users request:while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
doneSome users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

11. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

12. As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

13. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•	Your choice: correct -
Ease of typing

14. The output of a script should produce the following results as requested by your manager:1 2 3 4 5 6 7 8 9 10
for i in {1..10}; do echo -n "$i "; done; echo

15. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.


16. Why do you use exec redirection in a script rather than simple redirection?
All stdout or all stderr can output from the script needs to go to the same file.


17. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:LOG=/tmp/logfile
exec > $LOG
echo hello
•	Correct -
Before the exec command add the line to duplicate stdin :
exec 6>&1


18. After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•	Your choice: correct -$BASHPID

19. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?
•	Correct -
Run the which git command and if the exit is code is not 0 then git is not installed.

20.case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esacReview the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac

1.
 
A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:
cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?

HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.
2.
 
The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do

 declare -l REPLY

 read -p "Do you want to continue: y/n "

 echo "hello"

 if [ "$REPLY" == "n" ] ; then

  break

 fi

done


In Bash, what is a valid way to return non-numeric values from a function?
a.	Store non-numerical values in global variables and access them outside of the function.

4.
 
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

5.
 
What is the main difference between the $@ and the $* special parameters? 

When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

6.
 
You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.
sudo tar -cvf etc.tar /etc 2>/dev/null&


sudo tar -cvf etc.tar /etc &>/dev/null&

7.
 
Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:
LOG=/tmp/logfile
exec > $LOG
echo hello

Before the exec command add the line to duplicate stdin :
exec 6>&1

8.
 
Which loop is best suited to be used while you wait for a condition to become true in Bash?
•  Your choice: correct -
until
9.
 
You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console.
 
What function is best suited for this task ?
•  Your choice: correct -
search() {
    find "$2" -name "*.$1" -type f -print
}
10.
 
It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.
COUNT=0

while true; do

  echo $COUNT

  let "COUNT++"

  if [ "$COUNT" -gt 1000 ]; then

      break

  fi

done
11.
 
Taking into account the following function:
add_numbers() {
    local num1="$1"
    local num2="$2"
    local sum=$((num1 + num2))
    echo "The sum of $num1 and $num2 is $sum."
}
Add proper documentation and comments to the function to explain its purpose, input parameters, and expected output.

12.
 
Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
The variable greeting should be global and the variable name should be local.


13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password
14.
 
You create the following script designed to print the values of multiple variables with numerical suffixes.
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?
•  Your choice: correct -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done
15.
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
16.
 
Consider the following code:
DIR='my own dir'
mkdir $DIR
How many directories will be created using this code?
Three

17.
 
As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do

  grep '^Passwd yes' $file

done

declare -i my_var1=42



declare -a my_var2=("apple" "banana" "orange")



declare -r my_var3="Hello, World!"





# Modify the variables

my_var1=10

my_var2[1]="pear"

my_var3="Goodbye, World!"


my_var3="Goodbye, World!"

19.
 
The output of a script should produce the following results as requested by your manager:
1 2 3 4 5 6 7 8 9 10
The output should be on its own line in the console and clear of any prompt. Which solution best meets this requirement?
for i in {1..10}; do echo -n "$i "; done; echo

20.
 
You develop a script that should run code until the user chooses to quit. Having chosen to implement a while loop, which is a possible solution?
•  while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
•  

21.
 
Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
•  Your choice: correct -
The shebang specifies zsh as the script interpreter.


22.
 
What is the difference in the execution of printf with and without the -v option?
Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.

23.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

sudo useradd "$MYUSER"

24.
 
In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•  Your choice: correct -
Ease of typing

25.
 
After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•  Your choice: correct -
$BASHPID

26.
 
Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.
my_string=$'Nice day\n'
string_length=${#my_string}
echo "$string_length"

9 is the expected output because the newline character is treated as a single character

27.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

shift 2

28.
 
An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:
alias report="printf 'User: %s\nDirectory: %s\n'"
•  Your choice: correct -
alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

29.
 
As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•  Your choice: correct -
LOG=/tmp/logfile
exec 6>&1
exec > $LOG

30.
 
You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 
•  Correct -
COUNT=10
if (( COUNT > 9 ))
  then
   echo "Hello"
fi


Shell Scripting with Bash

1. Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

	sudo useradd "$MYUSER"
	
2. Which keyword is used to declare local variables within functions?

	local
	
3. Which octal value sets the following symbolic permissions?
rwxr-xr-x

	755
	
4. What is the shebang can be added to a script so it will print the execution trace for debugging purposes?

	#!/bin/bash -x
	
5. Which character is used after each option letter to indicate that the option requires an argument when using the getopts function?

	:
	
6. What is the expected behavior of the following script? 
[[ $(id -u) -eq 0 ]] && user="yes" || user="no"

echo "$user"

	Checks if the UID of the current user is equal to 0 and outputs "yes" if the UID is equal to 0 or "no" if it is not equal to 0. 
	
7. What is used with echo allows for embedded control characters?

	-e
	
8. Which is a valid Bash variable name?

	_var1
	
9. In the context of Bash scripting, which specific term is used to declare a function?

	function
	
10. l. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?

	if [ $# -ne 1 ]
	then
	  echo "Usage $0 arg1"
	  exit 2
	fi
	echo "$1"
	
11. A bash script you are analyzing prints each command before executing it and also exits immediately after a command fails.  Which commands could cause this behavior?

	set -x and set -e
	
12. You have a Bash script that sets a variable called VAR to a value of 255. You want to make this variable available to any child processes that the script spawns. How might you modify the script to achieve this task?

	export VAR
	
13. Which special parameter retrieves all parameters as a single string ?

	$*
	
14. What is the difference between the Bash operators > and >> ?

	> is used to overwrite a file and >> is used to append to a file.
	
15. You have been asked by a colleague to review the following Bash printf command as they are can't get the decimal places to print
printf '$%d\n' 123.126
What command would correctly print as currency and include just two decimal places?

	printf '$%.2f\n' 123.126
	
16. What is the difference between using the $# and $* special variables?

	The special variable $# holds the total number of arguments passed while the special variable $* holds the values of the arguments passed.
	
17. You are aware that many of your developers make use of the umask extensively when working at the command line. Over time, you notice inconsistency in the execute permission being set on scripts. Currently, to set the execute permission for all objects the following command is used:
chmod +x file.sh
To ensure consistency in setting the execute permission for all objects how should you modify the command?

	chmod a+x
	
18. Which Bash operator is used to send the output of one process to the input of another?
	
	|
	
19.
if (( $num % 2 == 0 )); then
  echo "yes"
else
  echo "no"
fi

if [[ $num -lt 0 ]]; then
  echo "yes"
elif [[ $num -gt 0 ]]; then
  echo "no"
else
  echo "neither"
fi
What would be the output of the script if the variable "num" would be 10.

	yes

	no
	
20. The special variables $* and $@ present all arguments to a script, but what is the difference between the two variables?

	$* holds all arguments in a single string and $@ as an array.
	
1. As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?

	echo -n "Enter data: "
	
2. As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?

	cat > /etc/motd <<EOF
	This a a secure system managed by example.com
	Employee access only
	EOF
	
3. The standard syntax for searching and replacing text in Bash is: f${variable/search/replace}. What is the outcome of using the following syntax: ${my_string//this/there}?

	Replaces all instances of the string this with the string there.
	
4. Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?
	
	sudo useradd "$MYUSER"
	
5. You have the following entry in your crontab file:
0 \* \* \* \* /opt/bin/server-checkup
What is the outcome of this entry ?

	The server-checkup script is run on an hourly basis.
	
6. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?

	Run the which git command and if the exit is code is not 0 then git is not installed.
	
7. You are reviewing code that populates the values of an array variable:
NAMES=('bob' 'ingrid' 'pete')
How would you correctly address the variable where 'ingrid' is stored?

	${NAMES[1]}
	
8. What can using the shift command allow you to do?

	Remove the first parameter passed to the script, allowing the second parameter to become first.
	
9. You are writing a script that expects a variable number of command line arguments, where each argument represents a filename. The script should print the contents of each file to the console, one after another. If no arguments were specified the script should return an error message. Which is the best solution for this task ?

	if [ $# -eq 0 ]; then
	  echo "Error: no filenames specified"
	  exit 1
	fi

	for file in "$@"; do
	  echo "Contents of $file:"
	  cat "$file"
	done
	
10. The script file called myscript.sh contains the following command:
echo $#
What would be the expected output of the following command:
./myscript.sh alpha beta delta

	3
	
11. How do Bash c-style and classic for loops differ?

	Classic for loops increment through a list and C-style loops provide more control though increment values.
	
12. Suppose you have the following function defined in myfunction.sh:
#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:
#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?

	#!/bin/bash
	source myfunction.sh
	greet
	
13. You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure. What script achieves this outcome?

	create_user() {
	  local username=$1
	  local password=$2
	  
	  sudo useradd -m -p $(echo $password) $username
	  
	  # Check if the user was successfully created
	  if [ $? -eq 0 ]; then
		echo "User account created successfully."
	  else
		echo "Error: failed to create user account."
	  fi
	}

	read -p "Enter a username: " username
	read -p "Enter a password: " password

	create_user $username $password
	
14. Which variable in Bash is used to represents the executing script's name?
	
	$0
	
15. What can you use exec redirection for inside of a Bash script?

	Redirection using exec allows all stdout from the script redirected to a named file.
	
16. How does a HEREDOC differ from simple stdin redirection?

	A HEREDOC specifies a block of text to be passed to the stdin of a process.
	
17. What is the correct syntax for using conditional expressions as a shortcut for if/then/else statements.

	<condition> && <if-true> || <if-false>

	[[ $age -ge 18 ]] && result="Age is greater than 18" || result="Age is below 18"
	
18. Which Bash operator is used to send the output of one process to the input of another?

	|
	
19. Which character is used to replace the test command in bash shorthand notation?

	[ ]
	
20. As a script developer, you need a script to always execute in debug mode while you are working on it. You have decided to implement a shebang to implement this with Bash. Which shebang should you choose?

	#!/bin/bash -x
	
1. You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

	read -p "Enter the filename: " ANSWER
	
2. The following script should allow for just one argument being supplied. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?

	if [ $# -ne 1 ]
	then
	  echo "Usage $0 arg1"
	  exit 2
	fi
	echo "$1"
	
3. What is the main benefit of exporting a variable?

	An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.
	
4. You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 

	COUNT=10
	if (( COUNT > 9 ))
	  then
	   echo "Hello"
	fi
	
5. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:
cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?

	HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.
	
6. Which loop is best suited to be used while you wait for a condition to become true in Bash?

	until
	
7. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

	Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.
	
8. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:
LOG=/tmp/logfile
exec > $LOG
echo hello

	Before the exec command add the line to duplicate stdin :

	exec 6>&1
	
9.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?

	case "$1" in
	  'start')
		echo "Starting"
		;;
	   'stop')
		 echo "Stopping"
		 ;;
	   *)
		echo "Usage: $0 start|stop"
		;;
	esac
	
10. Which statement is considered good practice for writing portable code?

	Use #!/bin/sh 
	
11. Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?

	The variable greeting should be global and the variable name should be local.
	
12.
declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"
Which of the commands within the script above is bound to fail?

	my_var3="Goodbye, World!"
	
13. The output of a script should produce the following results as requested by your manager:
1 2 3 4 5 6 7 8 9 10
The output should be on its own line in the console and clear of any prompt. Which solution best meets this requirement?

	for i in {1..10}; do echo -n "$i "; done; echo
	
14. What is process substitution in the Bash shell?

	Piping of the stdout of one or more processes to the stdin of another.
	
15.
check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

	if [ -z "$process_pid" ]; then
		return 1
	  else
		return $process_pid
	  fi
	  
16. What is the difference in the execution of printf with and without the -v option?

	Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.
	
17. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?

	Ease of typing
	
18. Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4  With which single command should you replace the dotted line to make output of the script correct?

	shift 2
	
19. Consider a situation where you have a shell script named "test" in your current working directory and an executable program with the same name "test" in the /usr/local/bin directory. Your PATH environment variable includes both the current working directory (.) and /usr/local/bin. You can investigate the "test" command/program with either the type or which commands? Which would be better suited for this task ?

	The type command would be more appropriate for inspecting the "test" command/program because it provides more comprehensive information about the command, indicating its type and location.
	
20. As a Linux administrator you need to create daily backup files with unique names. How can the backup file be named using temporary variables?

	backup.$(date +%F)
	
3. The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

		while true; do
		 declare -l REPLY
		 read -p "Do you want to continue: y/n "
		 echo "hello"
		 if [ "$REPLY" == "n" ] ; then
		  break
		 fi
		done
		
4. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task 

	search() {
		find "$2" -name "*.$1" -type f -print
	}
	
6. Which is the correct syntax for using variable expansion to provide a default value? 

	${VARNAME:-DEFAULT_VALUE}
	
9. Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?

	The shebang specifies zsh as the script interpreter.
	
10. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.
sudo tar -cvf etc.tar /etc 2>/dev/null&

	sudo tar -cvf etc.tar /etc &>/dev/null&
	
13. You create the following script designed to print the values of multiple variables with numerical suffixes.
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?

	#!/usr/bin/bash
	user1=bob
	user2=jane
	for arg in {1..2} ; do
	eval "echo \${user$arg}"
	done
	
15. It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.

	COUNT=0
	while true; do
	  echo $COUNT
	  let "COUNT++"
	  if [ "$COUNT" -gt 1000 ]; then
		  break
	  fi
	done
	
17. Which option for the test command is used to check that the sticky bit is set on a directory?

	-k
	
20. Consider the following code:
DIR='my own dir'
mkdir $DIR
How many directories will be created using this code?

	Three
	
22. In Bash, what is a valid way to return non-numeric values from a function?

	Store non-numerical values in global variables and access them outside of the function.

1.
 
Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?

•  The shebang specifies zsh as the script interpreter.

2.
 
The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

A : while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

3.
 
You develop a script that should run code until the user chooses to quit. Having chosen to implement a while loop, which is a possible solution?
A :
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

4.
 
Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?

A ; The variable greeting should be global and the variable name should be local.

5.
 
Which is the correct syntax for using variable expansion to provide a default value? 
${VARNAME:-DEFAULT_VALUE}
6.
 
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.
7.
 
As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
A : 
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

8.
 
After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
A ; $BASHPID

9.
declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"
Which of the commands within the script above is bound to fail?
A ; my_var3="Goodbye, World!"


10.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?

create_user() {
  local username=$1
  local password=$2
  
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: " username
read -p "Enter a password: " password

create_user $username $password


11.
 
Why do you use exec redirection in a script rather than simple redirection?
•  
•  All stdout or all stderr can output from the script needs to go to the same file.
•  
12.
 
You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 
A ; COUNT=10
if (( COUNT > 9 ))
  then
   echo "Hello"
fi

13.
 
What can using the shift command allow you to do?
•  
A ; •  Remove the first parameter passed to the script, allowing the second parameter to become first.
•  

14.
check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

A ; if [ -z "$process_pid" ]; then
    return 1
  else
    return $process_pid
  fi

15.
 
In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?

A: •  Ease of typing
•  

16.
 
Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.

A ; •  9 is the expected output because the newline character is treated as a single character
•  
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
A :
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac

18.
 
What is the difference in the execution of printf with and without the -v option?
•  
A: •  Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.
•  

19.
 
A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:

A: HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.

20.
 
Which is a preferred alternative to the which command when using Bash? 
•  
•  command -v
•  
1.
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Ans: Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

2.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
Ans: 
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
 
3.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

Ans: sudo useradd "$MYUSER"

4.
 
What is the main benefit of exporting a variable?

An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.

5.
 
Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?

Ans: It doesn't provide proper process management and logging

check_process() {

  local process_name="httpd"

  local process_pid=$(pgrep $process_name)

..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

 if [ -z "$process_pid" ]; then

    return 1

  else

    return $process_pid

  fi


Assume you have the following Bash function defined:
function myfunction {

    var1=0

    for num in "$@"; do

        if [[ $num -gt $var1 ]]; then

            var1=$num

        fi

    done

    echo $var1

}
What is the expected output of the function if you call it as stated bellow:
myfunction 16 3 17 2
17

8.
 
Why do you use exec redirection in a script rather than simple redirection?

All stdout or all stderr can output from the script needs to go to the same file.
9.
 
Which is a preferred alternative to the which command when using Bash? 

command -v

10.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

•  shift 2

11.
 
You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

read -p "Enter the filename: " ANSWER

12.
 
Which option for the test command is used to check that the sticky bit is set on a directory?
•   -k

13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password


14.
 
Why is it recommended to avoid the which command within Bash?

The which command may lead to unexpected results or may not provide complete information about a command.



What is the main difference between the $@ and the $* special parameters? 

Ans: When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

 
A Linux administrator is creating a script to run on request in a user's environment to print the process information for the current shell. Upon consideration which command provides the best flexibility?
Ans: ps -fp $$

 
As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?
Ans: echo -n "Enter data: "

How do Bash c-style and classic for loops differ?
Ans: Classic for loops increment through a list and C-style loops provide more control though increment values.

19.
#First Function
function print {

  for arg in "$@"; do

    echo "[$arg]"

  done

}
#Second Function 
function print {

  for arg in "$*"; do

    echo "[$arg]"

  done

}
Input:
print "alpha" "beta delta" "gamma"
Which of the functions above will return the following output: 
[alpha]
[beta delta]
[gamma]

Ans: The first function.

What can using the shift command allow you to do?
Ans: Remove the first parameter passed to the script, allowing the second parameter to become first.




1.declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"Which of the commands within the script above is bound to fail?
•	Your choice: correct -my_var3="Goodbye, World!"

2. An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:alias report="printf 'User: %s\nDirectory: %s\n'"

alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

3. Which loop is best suited to be used while you wait for a condition to become true in Bash?
Until

4. Which is the correct syntax for using variable expansion to provide a default value?  
${VARNAME:-DEFAULT_VALUE}

5. As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•	Your choice: correct -LOG=/tmp/logfile
exec 6>&1
exec > $LOG

6. Using the file command to investigate a script the following is printed:$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
The shebang specifies zsh as the script interpreter.

7. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task ?
•	Your choice: correct -search() {
    find "$2" -name "*.$1" -type f -print
}

8. You create the following script designed to print the values of multiple variables with numerical suffixes.#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
doneThe script errors on execution, how would you correct the script so it prints both variables correctly?
ANS
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done

9. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.sudo tar -cvf etc.tar /etc 2>/dev/null&

sudo tar -cvf etc.tar /etc &>/dev/null&

10. The following script has been developed by your colleague who reports that it does not always terminate when the users request:while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
doneSome users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

11. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

12. As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

13. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•	Your choice: correct -
Ease of typing

14. The output of a script should produce the following results as requested by your manager:1 2 3 4 5 6 7 8 9 10
for i in {1..10}; do echo -n "$i "; done; echo

15. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.


16. Why do you use exec redirection in a script rather than simple redirection?
All stdout or all stderr can output from the script needs to go to the same file.


17. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:LOG=/tmp/logfile
exec > $LOG
echo hello
•	Correct -
Before the exec command add the line to duplicate stdin :
exec 6>&1


18. After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•	Your choice: correct -$BASHPID

19. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?
•	Correct -
Run the which git command and if the exit is code is not 0 then git is not installed.

20.case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esacReview the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac



1.
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Ans: Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

2.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
Ans: 
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
 
3.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

Ans: sudo useradd "$MYUSER"

4.
 
What is the main benefit of exporting a variable?

An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.

5.
 
Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?

Ans: It doesn't provide proper process management and logging

check_process() {

  local process_name="httpd"

  local process_pid=$(pgrep $process_name)

..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 

 if [ -z "$process_pid" ]; then

    return 1

  else

    return $process_pid

  fi


Assume you have the following Bash function defined:
function myfunction {

    var1=0

    for num in "$@"; do

        if [[ $num -gt $var1 ]]; then

            var1=$num

        fi

    done

    echo $var1

}
What is the expected output of the function if you call it as stated bellow:
myfunction 16 3 17 2
17

8.
 
Why do you use exec redirection in a script rather than simple redirection?

All stdout or all stderr can output from the script needs to go to the same file.
9.
 
Which is a preferred alternative to the which command when using Bash? 

command -v

10.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

•  shift 2

11.
 
You create a script. When you run it, the printed result fails to include the input data. The script snippet is shown:
#!/bin/bash
read -p "Enter the filename: "
printf 'The file is %s\n' $ANSWER
How do you modify the script to allow for the correct variable name?

read -p "Enter the filename: " ANSWER

12.
 
Which option for the test command is used to check that the sticky bit is set on a directory?
•   -k

13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password


14.
 
Why is it recommended to avoid the which command within Bash?

The which command may lead to unexpected results or may not provide complete information about a command.



What is the main difference between the $@ and the $* special parameters? 

Ans: When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

 
A Linux administrator is creating a script to run on request in a user's environment to print the process information for the current shell. Upon consideration which command provides the best flexibility?
Ans: ps -fp $$

 
As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?
Ans: echo -n "Enter data: "

How do Bash c-style and classic for loops differ?
Ans: Classic for loops increment through a list and C-style loops provide more control though increment values.

19.
#First Function
function print {

  for arg in "$@"; do

    echo "[$arg]"

  done

}
#Second Function 
function print {

  for arg in "$*"; do

    echo "[$arg]"

  done

}
Input:
print "alpha" "beta delta" "gamma"
Which of the functions above will return the following output: 
[alpha]
[beta delta]
[gamma]

Ans: The first function.

What can using the shift command allow you to do?
Ans: Remove the first parameter passed to the script, allowing the second parameter to become first.




1.declare -i my_var1=42

declare -a my_var2=("apple" "banana" "orange")

declare -r my_var3="Hello, World!"


# Modify the variables
my_var1=10
my_var2[1]="pear"
my_var3="Goodbye, World!"Which of the commands within the script above is bound to fail?
•	Your choice: correct -my_var3="Goodbye, World!"

2. An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:alias report="printf 'User: %s\nDirectory: %s\n'"

alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

3. Which loop is best suited to be used while you wait for a condition to become true in Bash?
Until

4. Which is the correct syntax for using variable expansion to provide a default value?  
${VARNAME:-DEFAULT_VALUE}

5. As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•	Your choice: correct -LOG=/tmp/logfile
exec 6>&1
exec > $LOG

6. Using the file command to investigate a script the following is printed:$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
The shebang specifies zsh as the script interpreter.

7. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task ?
•	Your choice: correct -search() {
    find "$2" -name "*.$1" -type f -print
}

8. You create the following script designed to print the values of multiple variables with numerical suffixes.#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
doneThe script errors on execution, how would you correct the script so it prints both variables correctly?
ANS
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done

9. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.sudo tar -cvf etc.tar /etc 2>/dev/null&

sudo tar -cvf etc.tar /etc &>/dev/null&

10. The following script has been developed by your colleague who reports that it does not always terminate when the users request:while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
doneSome users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done

11. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

12. As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done

13. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•	Your choice: correct -
Ease of typing

14. The output of a script should produce the following results as requested by your manager:1 2 3 4 5 6 7 8 9 10
for i in {1..10}; do echo -n "$i "; done; echo

15. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.


16. Why do you use exec redirection in a script rather than simple redirection?
All stdout or all stderr can output from the script needs to go to the same file.


17. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:LOG=/tmp/logfile
exec > $LOG
echo hello
•	Correct -
Before the exec command add the line to duplicate stdin :
exec 6>&1


18. After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•	Your choice: correct -$BASHPID

19. As a system administrator, you would like to check if the program git is installed within the system's PATH. How best can you accomplish this task?
•	Correct -
Run the which git command and if the exit is code is not 0 then git is not installed.

20.case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esacReview the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac

1.
 
A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:
cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?

HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.
2.
 
The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

while true; do

 declare -l REPLY

 read -p "Do you want to continue: y/n "

 echo "hello"

 if [ "$REPLY" == "n" ] ; then

  break

 fi

done


In Bash, what is a valid way to return non-numeric values from a function?
a.	Store non-numerical values in global variables and access them outside of the function.

4.
 
What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

5.
 
What is the main difference between the $@ and the $* special parameters? 

When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

6.
 
You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.
sudo tar -cvf etc.tar /etc 2>/dev/null&


sudo tar -cvf etc.tar /etc &>/dev/null&

7.
 
Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:
LOG=/tmp/logfile
exec > $LOG
echo hello

Before the exec command add the line to duplicate stdin :
exec 6>&1

8.
 
Which loop is best suited to be used while you wait for a condition to become true in Bash?
•  Your choice: correct -
until
9.
 
You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console.
 
What function is best suited for this task ?
•  Your choice: correct -
search() {
    find "$2" -name "*.$1" -type f -print
}
10.
 
It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.
COUNT=0

while true; do

  echo $COUNT

  let "COUNT++"

  if [ "$COUNT" -gt 1000 ]; then

      break

  fi

done
11.
 
Taking into account the following function:
add_numbers() {
    local num1="$1"
    local num2="$2"
    local sum=$((num1 + num2))
    echo "The sum of $num1 and $num2 is $sum."
}
Add proper documentation and comments to the function to explain its purpose, input parameters, and expected output.

12.
 
Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
The variable greeting should be global and the variable name should be local.


13.
 
You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure.
 
What script achieves this outcome?
create_user() {

  local username=$1

  local password=$2

  

  sudo useradd -m -p $(echo $password) $username

  

  # Check if the user was successfully created

  if [ $? -eq 0 ]; then

    echo "User account created successfully."

  else

    echo "Error: failed to create user account."

  fi

}



read -p "Enter a username: " username

read -p "Enter a password: " password



create_user $username $password
14.
 
You create the following script designed to print the values of multiple variables with numerical suffixes.
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?
•  Your choice: correct -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done
15.
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
case "$1" in

  'start')

    echo "Starting"

    ;;

   'stop')

     echo "Stopping"

     ;;

   *)

    echo "Usage: $0 start|stop"

    ;;

esac
16.
 
Consider the following code:
DIR='my own dir'
mkdir $DIR
How many directories will be created using this code?
Three

17.
 
As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
for file in "/tmp/*.conf"; do

  grep '^Passwd yes' $file

done

declare -i my_var1=42



declare -a my_var2=("apple" "banana" "orange")



declare -r my_var3="Hello, World!"





# Modify the variables

my_var1=10

my_var2[1]="pear"

my_var3="Goodbye, World!"


my_var3="Goodbye, World!"

19.
 
The output of a script should produce the following results as requested by your manager:
1 2 3 4 5 6 7 8 9 10
The output should be on its own line in the console and clear of any prompt. Which solution best meets this requirement?
for i in {1..10}; do echo -n "$i "; done; echo

20.
 
You develop a script that should run code until the user chooses to quit. Having chosen to implement a while loop, which is a possible solution?
•  while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
•  

21.
 
Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
•  Your choice: correct -
The shebang specifies zsh as the script interpreter.


22.
 
What is the difference in the execution of printf with and without the -v option?
Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.

23.
 
Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?

sudo useradd "$MYUSER"

24.
 
In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
•  Your choice: correct -
Ease of typing

25.
 
After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
•  Your choice: correct -
$BASHPID

26.
 
Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.
my_string=$'Nice day\n'
string_length=${#my_string}
echo "$string_length"

9 is the expected output because the newline character is treated as a single character

27.
 
Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4 
 
With which single command should you replace the dotted line to make output of the script correct?

shift 2

28.
 
An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:
alias report="printf 'User: %s\nDirectory: %s\n'"
•  Your choice: correct -
alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"

29.
 
As a Linux administrator you have been asked to create a script that will record all of the stdout to a named file rather than writing to the default console. At the end of the script, stdout is reconnected to the default console. How can you achieve the initial redirection to the named file that will also allow redirection back to stdout when required?
•  Your choice: correct -
LOG=/tmp/logfile
exec 6>&1
exec > $LOG

30.
 
You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 
•  Correct -
COUNT=10
if (( COUNT > 9 ))
  then
   echo "Hello"
fi


1. What is the main difference between the $@ and the $* special parameters? 
Incorrect -
There is no significant difference between these special parameters.

Incorrect -
When using $@, the parameters are treated as a single string while $* treats each parameter as a separate item. 

Incorrect -
When using $@, the parameters are treated as a single string while $* treats each parameter as a separate integer.

Correct -
When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

Incorrect -
I don't know yet.


2. Which octal value sets the following symbolic permissions?
rwxr-xr-x
Your choice: correct -
755

Incorrect -
744

Incorrect -
655

Incorrect -
711

Incorrect -
I don't know yet.



3. A bash script you are analyzing prints each command before executing it and also exits immediately after a command fails.  Which commands could cause this behavior?
Incorrect -
set -x and set -u

Incorrect -
set -f and set -e

Incorrect -
set -u and set -f

Your choice: correct -
set -x and set -e

Incorrect -
I don't know yet.



4. Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4  With which single command should you replace the dotted line to make output of the script correct?
Incorrect -
move 2

Correct -
shift 2

Your choice: incorrect -
shift 1

Incorrect -
shift 3

Incorrect -
I don't know yet.


5. Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?
Your choice: incorrect -
There is no downside to this approach as this is standard approach for modern Linux systems.

Correct -
It doesn't provide proper process management and logging

Incorrect -
It only provides the capacity for automatic restarts

Incorrect -
The script will still be attached to the current terminal.

Incorrect -
I don't know yet.


6. Which is a valid Bash variable name?
Correct -
_var1
Incorrect -
var?
Your choice: incorrect -
1var
Incorrect -
var#
Incorrect -
I don't know yet.



7. You need to create a script that takes two optional arguments, -n for specifying the name of a file and -o for specifying the owner of the file.  Which of the following would be suited for this task? 
Incorrect -
while getopts ":n:" opt; do
  case ${opt} in
    n )
      name=${OPTARG}
      ;;
    o )
      owner=${OPTARG}
      ;; 
Incorrect -
while getopts ":n:o:" opt; do
  case ${opt} in
    no )
      name=${OPTARG}  owner=${OPTARG} ;;
Incorrect -
while getopts ":n:" opt; do
  case ${opt} in
    n )
      owner=${OPTARG}
      ;;
    o )
      name=${OPTARG}
      ;;  
Your choice: correct -
while getopts ":n:o:" opt; do
  case ${opt} in
    n )
      name=${OPTARG}
      ;;
    o )
      owner=${OPTARG}
      ;;
Incorrect -
I don't know yet.


8. Which variable in Bash is used to represents the executing script's name?
Correct -
$0
Your choice: incorrect -
$!
Incorrect -
$1
Incorrect -
$?


9. You need to write a Bash script to monitor disk usage on multiple servers. The script should prompt the user to enter the names or IP addresses of the servers to monitor, store them in an array, and then run the df -h command on each one, storing the results in the file "output". What script would best achieve this?
Incorrect -
echo "Please enter the names or IP addresses of the servers to monitor (separate each with a space):"
read -a servers

for server in "${servers[#]}"; do
    ssh "$server" 'df -h' >> output
done  
Your choice: correct -
echo "Please enter the names or IP addresses of the servers to monitor (separate each with a space):"
read -a servers

for server in "${servers[@]}"; do
    ssh "$server" 'df -h' >> output
done
Incorrect -
echo "Please enter the names or IP addresses of the servers to monitor (separate each with a space):"
read servers

for server in "${servers[@]}"; do
    ssh "$server" 'df -h' >> output
done 
Incorrect -
echo "Please enter the names or IP addresses of the servers to monitor (separate each with a space):"
read -a servers

for server in "${servers[$]}"; do
    ssh "$server" 'df -h' >> output
done  
Incorrect -
I don't know yet.



10. What is used with echo allows for embedded control characters?
Incorrect -
-c

Incorrect -
-p

Your choice: correct -
-e

Incorrect -
-f

Incorrect -
I don't know yet.


11. As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?
Incorrect -
read > /etc/motd <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Incorrect -
cat <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Incorrect -
cat > /etc/motd <<<EOF
This a a secure system managed by example.com
Employee access only
<<<EOF
Your choice: correct -
cat > /etc/motd <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Incorrect -
I don't know yet.


12. What is the shebang can be added to a script so it will print the execution trace for debugging purposes?
Your choice: correct -
#!/bin/bash -x
Incorrect -
#!/bin/bash -e
Incorrect -
#!/bin/bash -d
Incorrect -
#!/bin/bash -t
Incorrect -
I don't know yet.


13. Suppose you have the following function defined in myfunction.sh:
#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:
#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?
Your choice: incorrect -
#!/bin/bash
./myfunction.sh
greet
Correct -
#!/bin/bash
source myfunction.sh
greet
Incorrect -
#!/bin/bash
myfunction.sh(greet) 
Incorrect -
#!/bin/bash
import myfunction.sh
greet 
Incorrect -
I don't know yet.

14. What is the correct syntax for using conditional expressions as a shortcut for if/then/else statements.
Incorrect -
<condition> && <if-false> || <if-true>

[[ $age -ge 18 ]] && result="Age is below 18" || result="Age is above 18"
Incorrect -
<condition> || <if-true> && <if-false>

[[ $age -ge 18 ]] || result="Age is below 18" && result="Age is above 18"
Your choice: correct -
<condition> && <if-true> || <if-false>

[[ $age -ge 18 ]] && result="Age is greater than 18" || result="Age is below 18"
Incorrect -
<condition> || <if-true> && <if-false>

[[ $age -ge 18 ]] || result="Age is greater than 18" && result="Age is below 18"
Incorrect -
I don't know yet.


15. Consider the following script: 
sum=0
while [[ $# -gt 0 ]]
do
  sum=$((sum + $1))
  shift
done
echo "$sum"
What would the output of this script be if the parameters of the script are:
./script.sh 1 2 3 4 5
Your choice: correct -
15

Incorrect -
14

Incorrect -
5

Incorrect -
10

Incorrect -
I don't know yet.


16. The following script should allow for just one argument being supplied. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?
Incorrect -
if [ $# -ne 1 ]
then
  exit 2
  echo "Usage $0 arg1"
fi
echo "$1"
Incorrect -
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
exit 2
echo "$1"
Your choice: correct -
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
  exit 2
fi
echo "$1"
Incorrect -
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi echo "$1"
Incorrect -
I don't know yet.


17. You have been asked by a colleague to review the following Bash printf command as they are can't get the decimal places to print
printf '$%d\n' 123.126
What command would correctly print as currency and include just two decimal places?
Incorrect -
printf '$%f\' 123.126

Incorrect -
printf '$%2d\' 123.126

Incorrect -
printf '$%.2d\' 123.126

Your choice: correct -
printf '$%.2f\n' 123.126

Incorrect -
I don't know yet.


18. You have been tasked with writing a Bash script to automate the creation of user accounts on a Linux server. The script will prompt the user for a username and password, and then create a new user account with those credentials. However, you have been advised to follow the key principles of variable scope to ensure that the script is reliable and secure. What script achieves this outcome?
Your choice: correct -
create_user() {
  local username=$1
  local password=$2
  
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: " username
read -p "Enter a password: " password

create_user $username $password
Incorrect -
create_user() {
  global username=$1
  global password=$2
  
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: " username
read -p "Enter a password: " password

create_user $username $password
Incorrect -
create_user() {
  local username=$1
  local password=$2
  
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: "
read -p "Enter a password: "

create_user $username $password 
Incorrect -
create_user() {
  sudo useradd -m -p $(echo $password) $username
  
  # Check if the user was successfully created
  if [ $? -eq 0 ]; then
    echo "User account created successfully."
  else
    echo "Error: failed to create user account."
  fi
}

read -p "Enter a username: " username
read -p "Enter a password: " password
local username=$1
local password=$2  

create_user $username $password 
Incorrect -
I don't know yet.


19. What can you use exec redirection for inside of a Bash script?
Incorrect -
Redirection using exec is not possible in Bash scripts.

Incorrect -
Redirection using exec allows escalation of privileges during the script execution.

Incorrect -
Redirection with exec in scripts will execute only part of the script.

Your choice: correct -
Redirection using exec allows all stdout from the script redirected to a named file.

Incorrect -
I don't know yet.


20. Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?
Incorrect -
The variable name should be declared outside the function.

Incorrect -
The variable name should be local. 

Your choice: incorrect -
The variable greeting should be declared within the function my_salute.

Correct -
The variable greeting should be global and the variable name should be local.

Incorrect -
I don't know yet.


1. What is the main benefit of exporting a variable?
Your choice: correct -
An exported variable becomes part of the environment, and can be accessed by any child process that is spawned by the current process.

Incorrect -
An exported variable becomes part of the environment, and can be accessed by any process.

Incorrect -
An exported variable can only be accessed by the current process.

Incorrect -
An exported variable becomes part of the environment, and can be accessed by other specified processes.

Incorrect -
I don't know yet.


2. Which variable is used by Bash builtin read command to store the response if the name of the variable is not included in the code?
Incorrect -
RESPONSE

Incorrect -
ANSWER

Incorrect -
READ

Your choice: correct -
REPLY

Incorrect -
I don't know yet.


3. In the context of parsing parameters in a shell script using the "getopts" command, what advantage does employing short options have over long options?
Your choice: incorrect -
Preferable in scripts where readability and maintainability are important.

Incorrect -
Clarity

Correct -
Ease of typing

Incorrect -
Ease of understanding

Incorrect -
I don't know yet.



4. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.
sudo tar -cvf etc.tar /etc 2>/dev/null&
Incorrect -
sudo tar -cvf etc.tar /etc 2>/dev/null
Incorrect -
sudo tar -cvf etc.tar /etc >/dev/null&
Correct -
sudo tar -cvf etc.tar /etc &>/dev/null&
Your choice: incorrect -
sudo tar -cvf etc.tar /etc 1>/dev/null&
Incorrect -
I don't know yet.



5. A Linux administrator is creating a script to run on request in a user's environment to print the process information for the current shell. Upon consideration which command provides the best flexibility?
Correct -
ps -fp $$
Incorrect -
ps -elf $$
Incorrect -
ps -fp $1
Your choice: incorrect -
ps -fp $1
Incorrect -
I don't know yet.


6. How does a HEREDOC differ from simple stdin redirection?
Incorrect -
A HEREDOC specifies the file to open.

Correct -
A HEREDOC specifies a block of text to be passed to the stdin of a process.

Incorrect -
HEREDOC redirection does not use delimeters which are used in stdin.

Your choice: incorrect -
Using HEREDOCs redirection is from stdout.

Incorrect -
I don't know yet.


7. What can using the shift command allow you to do?
Incorrect -
Switch between the first and second parameters passed to a script.

Your choice: correct -
Remove the first parameter passed to the script, allowing the second parameter to become first.

Incorrect -
Ignore the first parameter passed to a script while still remembering it within the array.

Incorrect -
Remember the first parameter passed to the script.

Incorrect -
I don't know yet.


8. Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4  With which single command should you replace the dotted line to make output of the script correct?
Your choice: correct -
shift 2

Incorrect -
shift 3

Incorrect -
shift 1

Incorrect -
move 2

Incorrect -
I don't know yet.


9. How do Bash c-style and classic for loops differ?
Incorrect -
Classic for loops increment through a list and C-style loops provide less control and are more simple.

Your choice: incorrect -
C-style for loops increment through a list and classic loops provide more control though increment values.

Correct -
Classic for loops increment through a list and C-style loops provide more control though increment values.

Incorrect -
Classic for loops increment through a list and C-style loops increment array values

Incorrect -
I don't know yet.


10. Assume you have the following Bash function defined:
function myfunction {
    var1=0
    for num in "$@"; do
        if [[ $num -gt $var1 ]]; then
            var1=$num
        fi
    done
    echo $var1
}
What is the expected output of the function if you call it as stated bellow:
myfunction 16 3 17 2
Your choice: correct -
17

Incorrect -
3

Incorrect -
16

Incorrect -
17 16 3 2

Incorrect -
I don't know yet.


11. You need to use a single command to print the username and their working directory from a login script. The username should be on one line followed by their working directory on another line. How would you achieve this?
Your choice: correct -
printf "Hello, %s\nDir: %s\n" $USER $PWD
Incorrect -
echo 'Hello, $USER Dir: $PWD'
Incorrect -
echo "Hello, $USER Dir: $PWD"
Incorrect -
printf 'Hello, %s Dir: %s ' $USER $PWD
Incorrect -
I don't know yet.


12. The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?
Incorrect -
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "N" ] ; then
  break
 fi
done
Your choice: incorrect -
while true; do
 declare -l $REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Correct -
while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Incorrect -
while true; do
 declare -L REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Incorrect -
I don't know yet.


13. Consider a situation where you have a shell script named "test" in your current working directory and an executable program with the same name "test" in the /usr/local/bin directory. Your PATH environment variable includes both the current working directory (.) and /usr/local/bin. You can investigate the "test" command/program with either the type or which commands? Which would be better suited for this task ?
Your choice: incorrect -
The which command would be more appropriate for inspecting the "test" command/program because it provides more comprehensive information about the command, indicating its type and location. 

Incorrect -
Both are equally good for inspecting the "test" program/command with no significant difference between the two.

Incorrect -
Neither of these commands can be used for investigating the "test" command/program. 

Correct -
The type command would be more appropriate for inspecting the "test" command/program because it provides more comprehensive information about the command, indicating its type and location.

Incorrect -
I don't know yet.


14. What is the difference between echo "$USER" and echo '$USER'
Incorrect -
Using single quotes the variable is expanded allowing the contents of the variable to print. Using double quotes the string $USER is printed.

Your choice: correct -
Using double quotes the variable is expanded allowing the contents of the variable to print. Using single quotes the string $USER is printed.

Incorrect -
Both statements print the string $USER as the option -e (expand) is not included in the echo command/

Incorrect -
Both statements print the content os the variable.

Incorrect -
I don't know yet.


15. You are charged with writing a bash function called search that takes two arguments: a file extension and a directory path. The function should search the given directory and all its subdirectories for files with the given extension, and print the full path of each matching file to the console. What function is best suited for this task ?
Your choice: incorrect -
search() {
    find "$1" -name "*.$2" -type f -print
}
Correct -
search() {
    find "$2" -name "*.$1" -type f -print
}
Incorrect -
search() {
    find "$0" -name "*.$2" -type f -print
} 
Incorrect -
search {
    find "$1" -name "*.$2" -type f -print
} 
Incorrect -
I don't know yet.



16. What is the main difference between the $@ and the $* special parameters? 
Your choice: correct -
When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

Incorrect -
When using $@, the parameters are treated as a single string while $* treats each parameter as a separate integer.

Incorrect -
When using $@, the parameters are treated as a single string while $* treats each parameter as a separate item. 

Incorrect -
There is no significant difference between these special parameters.

Incorrect -
I don't know yet.


17. You are aware that many of your developers make use of the umask extensively when working at the command line. Over time, you notice inconsistency in the execute permission being set on scripts. Currently, to set the execute permission for all objects the following command is used:
chmod +x file.sh
To ensure consistency in setting the execute permission for all objects how should you modify the command?
Your choice: incorrect -
chmod +X
Incorrect -
chmod -x
Correct -
chmod a+x
Incorrect -
chmod a=x
Incorrect -
I don't know yet.


18. What can you use exec redirection for inside of a Bash script?
Incorrect -
Redirection using exec is not possible in Bash scripts.

Your choice: correct -
Redirection using exec allows all stdout from the script redirected to a named file.

Incorrect -
Redirection with exec in scripts will execute only part of the script.

Incorrect -
Redirection using exec allows escalation of privileges during the script execution.

Incorrect -
I don't know yet.


19. How do the arrays differ that are initialized with declare -a and declare -A?
Incorrect -
Using uppercase A, array elements are accessed using the index value. Using lowercase a, elements are access using a key value.

Your choice: correct -
Using lowercase a, array elements are accessed using the index value. Using uppercase A, elements are access using a key value.

Incorrect -
The two options are equivalent and either uppercase or lowercase A work in the same way

Incorrect -
The option as an uppercase A is an invalid option and produces an error

Incorrect -
I don't know yet.


20. Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?
Your choice: correct -
The variable greeting should be global and the variable name should be local.

Incorrect -
The variable name should be local. 

Incorrect -
The variable greeting should be declared within the function my_salute.

Incorrect -
The variable name should be declared outside the function.

Incorrect -
I don't know yet.


3. As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
Incorrect -
for file in {/tmp/*.conf}; do
  grep '^Passwd yes' $file
done
Your choice: correct -
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done
Incorrect -
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' file
done
Incorrect -
for $file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done
Incorrect -
I don't know yet.

4. Why is it recommended to avoid the which command within Bash?
Incorrect -
There is no reason to avoid the which command when using Bash.

Incorrect -
The which command only gives details on the type of the command.

Correct -
The which command may lead to unexpected results or may not provide complete information about a command.

Your choice: incorrect -
The which command only searches for shell built-ins, aliases, or functions.

Incorrect -
I don't know yet.

5. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:
cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?
Correct -
HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.

Incorrect -
The command cat should read the input from the time server configuration file using a single less than sumbol (<).

Incorrect -
A HEREDOC needs the starting and ending delimiter without preceding redirection arrows.

Your choice: incorrect -
A HEREDOC uses double less than symbols (<<) at the opening and closing of the document.

Incorrect -
I don't know yet.

7. You have the following entry in your crontab file:
0 \* \* \* \* /opt/bin/server-checkup
What is the outcome of this entry ?
Correct -
The server-checkup script is run on an hourly basis.

Incorrect -
The server-checkup script is run on a daily basis.

Incorrect -
The server-checkup script is run once.

Your choice: incorrect -
The server-checkup script is run each minute. 

Incorrect -
I don't know yet.

8.
check_process() {
  local process_name="httpd"
  local process_pid=$(pgrep $process_name)
..................................
}
How would you complete the function so what it will return the process id (PID) of the "httpd" service if it is running or the value 1 if the service is not running? 
Incorrect -
  if [ -z "$process_pid" ]; then
    return $process_pid 
  else
    return 1
  fi 
Incorrect -
if [ -z "$process_pid" ]; then
    return 0 
else
    return $process_pid
fi  
Your choice: correct -
  if [ -z "$process_pid" ]; then
    return 1
  else
    return $process_pid
  fi
Incorrect -
if [ -eq "$process_pid" ]; then
    return $process_pid 
else
    return 1
fi  
Incorrect -
I don't know yet.


9. As a Linux administrator you need to create daily backup files with unique names. How can the backup file be named using temporary variables?
Correct -
backup.$(date +%F)
Incorrect -
backup.$'date +%F'

Incorrect -
backup.$[date +%F]

Your choice: incorrect -
backup.${date +%F}
Incorrect -
I don't know yet.

10. Which option for the test command is used to check that the sticky bit is set on a directory?
Incorrect -
-z
Correct -
-k
Your choice: incorrect -
-s
Incorrect -
-t
Incorrect -
I don't know yet.
11. Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.
my_string=$'Nice day\n'
string_length=${#my_string}
echo "$string_length"
Your choice: incorrect -
8 is the expected output as the newline character is not taken into account

Incorrect -
7 is the expected because spacing and the newline character are ignored when counting

Incorrect -
10 is the expected output because that is the number of characters contained within the variable

Correct -
9 is the expected output because the newline character is treated as a single character

Incorrect -
I don't know yet.

12. Working with data that is input by users, you need to ensure the integrity of the data is maintained. Which implementation of the variable will maintain spaces entered by the user ?
Incorrect -
sudo useradd ${MYUSER}
Your choice: correct -
sudo useradd "$MYUSER"
Incorrect -
sudo useradd '$MYUSER'
Incorrect -
sudo useradd $MYUSER
Incorrect -
I don't know yet.

15. Which is a preferred alternative to the which command when using Bash? 
Incorrect -
declare
Incorrect -
find
Correct -
command -v
Your choice: incorrect -
locate
Incorrect -
I don't know yet.
16. Consider the following code:
DIR='my own dir'
mkdir $DIR
How many directories will be created using this code?
Your choice: incorrect -
One

Incorrect -
Zero

Incorrect -
Two

Correct -
Three

Incorrect -
I don't know yet.

18. Why do you use exec redirection in a script rather than simple redirection?
Correct -
All stdout or all stderr can output from the script needs to go to the same file.

Incorrect -
Simple redirection does not need to reference a filename.

Incorrect -
Only stdout needs to be redirected.

Your choice: incorrect -
Using exec you have to specify the filename to redirect to for each command.

Incorrect -
I don't know yet.

20.
#First Function
function print {
  for arg in "$@"; do
    echo "[$arg]"
  done
}
#Second Function 
function print {
  for arg in "$*"; do
    echo "[$arg]"
  done
}
Input:
print "alpha" "beta delta" "gamma"
Which of the functions above will return the following output: 
[alpha]
[beta delta]
[gamma]
Incorrect -
The second function.

Your choice: correct -
The first function.

Incorrect -
Neither function will return the appropriate output.

Incorrect -
Both the first and second functions.

Incorrect -
I don't know yet.

2. As a Linux administrator you are creating a script that will prompt the user for input using the echo command. You would like the the prompt to remain on the same line as the user inputs data. How might you best achieve this?
Incorrect -
echo -v "Enter data: "
Correct -
echo -n "Enter data: "
Your choice: incorrect -
echo -e "Enter data: "
Incorrect -
echo --suppress "Enter data: " 
Incorrect -
I don't know yet.

5. The standard syntax for searching and replacing text in Bash is: f${variable/search/replace}. What is the outcome of using the following syntax: ${my_string//this/there}?
Incorrect -
This is not a valid syntax.

Incorrect -
Replaces the first instance of the string this with the string there. 

Your choice: correct -
Replaces all instances of the string this with the string there.

Incorrect -
Replaces all instances of the string there with the string this. 

Incorrect -
I don't know yet.

10. What is process substitution in the Bash shell?
Incorrect -
Piping of the stdout of a single process to the stdin of another.

Incorrect -
Redirection of a text file to the stdin of a process.

Your choice: incorrect -
Redirection of the stdout of a process to a text file.

Correct -
Piping of the stdout of one or more processes to the stdin of another.

Incorrect -
I don't know yet.

12. Which statement is considered good practice for writing portable code?
Incorrect -
Use Bash-specific features

Incorrect -
Avoid external utilities

Correct -
Use #!/bin/sh 

Your choice: incorrect -
Use #!/bin/bash

Incorrect -
I don't know yet.

13. Which loop is best suited to be used while you wait for a condition to become true in Bash?
Your choice: correct -
until

Incorrect -
while

Incorrect -
case

Incorrect -
for

Incorrect -
I don't know yet.

14. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Your choice: incorrect -
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it not set.

Incorrect -
Both recursively set the execute permission to the /scripts/ directory and below but using the lowercase X, the execute permission is only added if it already exits on at least one object.

Correct -
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

Incorrect -
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it does not exit on at least one object.

Incorrect -
I don't know yet.

15. You are developing a Bash script that needs to execute code when a counter raises above an integer value. As you develop the script you have been testing snippets of code; what solution do you implement? 
Incorrect -
COUNT=10
if [[ COUNT > 9 ]]
  then
   echo "Hello"
fi
Your choice: incorrect -
COUNT=10
if [ COUNT > 9 ]
  then
   echo "Hello"
fi
Incorrect -
COUNT=10
if (( COUNT < 9 ))
  then
   echo "Hello"
fi
Correct -
COUNT=10
if (( COUNT > 9 ))
  then
   echo "Hello"
fi
Incorrect -
I don't know yet.

17. After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
Incorrect -
$BASH
Incorrect -
$SHELL
Your choice: incorrect -
$$
Correct -
$BASHPID
Incorrect -
I don't know yet.

18. What is the difference in the execution of printf with and without the -v option?
Your choice: correct -
Using -v the output is stored on a variable; without the option the output is shown on the console unless redirected.

Incorrect -
Using the -v option the output from printf is stored in a variable, without the option the output is redirected to the echo command.

Incorrect -
The option -v is used to verify the code without execution.

Incorrect -
The option -v shows verbose output; without the option the output is more brief.

Incorrect -
I don't know yet.

20. Using the file command to investigate a script the following is printed:
$ file my.sh
my.sh: Paul Falstad's zsh script, ASCII text executable
What can you deduce from the output?
Incorrect -
Paul Falstad is the script author.

Incorrect -
The script is part of a git repository owned by Paul Falstad.

Your choice: correct -
The shebang specifies zsh as the script interpreter.

Incorrect -
The execute permission is set on the file my.sh.

Incorrect -
I don't know yet.



20. Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?
Incorrect -
The variable name should be declared outside the function.

Incorrect -
The variable name should be local. 

Your choice: incorrect -
The variable greeting should be declared within the function my_salute.

Correct -
The variable greeting should be global and the variable name should be local.

Incorrect -
I don't know yet.

10. In Bash, what is a valid way to return non-numeric values from a function?
Correct -
Store non-numerical values in global variables and access them outside of the function.

Your choice: incorrect -
You can return non-numeric values using the return statement by simply providing a string or non-numeric value after the return keyword.

Incorrect -
To return non-numeric values from a function, you should use the eval command, which is specifically designed to handle non-numeric data in functions.

Incorrect -
There are no ways to return non-numeric values from a function.

Incorrect -
I don't know yet.


12. Working at the command line you have successfully used exec to redirect all stdout to a named file; however, you are unable to return stdout to the console when required without logging out. Reviewing your command history, what can you add next time to ensure you can easily redirect stdout back to the console:
LOG=/tmp/logfile
exec > $LOG
echo hello
Your choice: incorrect -
After the echo command add the line to duplicate stdin:

exec 6>&1
Correct -
Before the exec command add the line to duplicate stdin :

exec 6>&1
Incorrect -
After the exec command add the line to duplicate stdin:

exec 6>&1
Incorrect -
After the LOG variable is declared, add a line to read the $LOG file:

exec < $LOG
Incorrect -
I don't know yet.


13.
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
esac
Review the script. The script works but if an incorrect option is supplied it does not do anything and does not give feedback to the operator. What would you add to the case statement to provide feedback for incorrect input?
Correct -
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
esac
Incorrect -
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   ! in start||stop)
    echo "Usage: $0 start|stop"
    ;;
esac
Incorrect -
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   [start|stop])
    echo "Usage: $0 start|stop"
    ;;
esac
Your choice: incorrect -
case "$1" in
  'start')
    echo "Starting"
    ;;
   'stop')
     echo "Stopping"
     ;;
   *)
    echo "Usage: $0 start|stop"
    ;;
   exit 1
esac
Incorrect -
I don't know yet.

15. You create the following script designed to print the values of multiple variables with numerical suffixes.
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?
Incorrect -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo "${user$arg}"
done
Incorrect -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo $(user$arg)
done
Your choice: incorrect -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo $user$arg
done
Correct -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done
Incorrect -
I don't know yet.


18. It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.
Incorrect -
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
  if [ "$COUNT" -gt 1000 ]; then
      continue
  fi
done
Correct -
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
  if [ "$COUNT" -gt 1000 ]; then
      break
  fi
done
Incorrect -
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
  if [ "$COUNT" -lt 1000 ]; then
      break
  fi
done
Your choice: incorrect -
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
  if [ "$COUNT" -ge 1000 ]; then
      break
  fi
done
Incorrect -
I don't know yet.


1. The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?
Incorrect -
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "N" ] ; then
  break
 fi
done
Your choice: incorrect -
while true; do
 declare -L REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Incorrect -
while true; do
 declare -l $REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Correct -
while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Incorrect -
I don't know yet.

Is something wrong with the question?

2.

A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:

cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?

2. A colleague has asked for you help in fixing a script that is required to create a configuration file for the time server. The code snippet your colleague created is listed:
cat > /etc/chrony.d/servers.conf <END
server 192.168.1.1 prefer iburst
pool us.pool.ntp.org iburst
<END
Based on your experience what is the problem with this code snippet?
Incorrect -
The command cat should read the input from the time server configuration file using a single less than sumbol (<).

Incorrect -
A HEREDOC needs the starting and ending delimiter without preceding redirection arrows.

Your choice: correct -
HEREDOCs should have double less than symbols (<<) at the opening delimiter and only the delimiter name without << at the close of the HEREDOC.

Incorrect -
A HEREDOC uses double less than symbols (<<) at the opening and closing of the document.

Incorrect -
I don't know yet.

Is something wrong with the question?

3.

Which statement would best describe the behavior of the following script:

if (($# < 4 ))
then
 echo "no"
elif (($# > 4))
then 
 echo "no"
else
 echo "yes"
fi
3. Which statement would best describe the behavior of the following script:
if (($# < 4 ))
then
 echo "no"
elif (($# > 4))
then 
 echo "no"
else
 echo "yes"
fi
Your choice: incorrect -
If the number of arguments passed to the script is not equal to 4 then the output will be "yes". 

Incorrect -
If the number of comments within the the script is not equal to 4 then the output will be "no". 

Incorrect -
If the number of arguments passed to the script is equal to 4 then the output will be "no". 

Correct -
If the number of arguments passed to the script is not equal to 4 then the output will be "no".

Incorrect -
I don't know yet.

Is something wrong with the question?

4.

Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.

my_string=$'Nice day\n'
string_length=${#my_string}
echo "$string_length"
4. Analyze the script provided, which includes the assignment of "Nice day\n" to the variable "my_string" and calculates the string's length using "${#my_string}", and then determine the expected output when the script is executed.
my_string=$'Nice day\n'
string_length=${#my_string}
echo "$string_length"
Incorrect -
10 is the expected output because that is the number of characters contained within the variable

Incorrect -
8 is the expected output as the newline character is not taken into account

Your choice: correct -
9 is the expected output because the newline character is treated as a single character

Incorrect -
7 is the expected because spacing and the newline character are ignored when counting

Incorrect -
I don't know yet.

Is something wrong with the question?

5.

Consider the following script: 

local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?

5. Consider the following script: 
local greeting="Hello"

function my_salute {
  name=$1
  echo "${greeting}, ${name}!"
}

read name
my_salute $name

echo "${greeting}"
Which mistake/mistakes can you identify in the script above ?
Your choice: correct -
The variable greeting should be global and the variable name should be local.

Incorrect -
The variable name should be declared outside the function.

Incorrect -
The variable greeting should be declared within the function my_salute.

Incorrect -
The variable name should be local. 

Incorrect -
I don't know yet.

Is something wrong with the question?

6.

It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:

COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.

6. It has been noted that a script created by a colleague can run excessively if it is not stopped by the operator correctly:
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
done
How can you correct the script to allow the for a maximum 1000 iterations before the script ends.
Incorrect -
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
  if [ "$COUNT" -lt 1000 ]; then
      break
  fi
done
Incorrect -
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
  if [ "$COUNT" -gt 1000 ]; then
      continue
  fi
done
Your choice: correct -
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
  if [ "$COUNT" -gt 1000 ]; then
      break
  fi
done
Incorrect -
COUNT=0
while true; do
  echo $COUNT
  let "COUNT++"
  if [ "$COUNT" -ge 1000 ]; then
      break
  fi
done
Incorrect -
I don't know yet.

Is something wrong with the question?

7.

What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?

7. What is the difference between chmod -R a+X scripts/ and chmod -R a+x /scripts/?
Your choice: correct -
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it already exits on at least one object.

Incorrect -
Both recursively set the execute permission to the /scripts/ directory and below but using the lowercase X, the execute permission is only added if it already exits on at least one object.

Incorrect -
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it not set.

Incorrect -
Both recursively set the execute permission to the /scripts/ directory and below but using the uppercase X, the execute permission is only added if it does not exit on at least one object.

Incorrect -
I don't know yet.

Is something wrong with the question?

8.

You use these commands to create an array of users.

my_users=(user1 user2 user3)
my_users+=(user4 user5)
unset my_users[2]
You decide to run the following command: 

echo "${my_users[@]}"
What will be the outcome?

8. You use these commands to create an array of users.
my_users=(user1 user2 user3)
my_users+=(user4 user5)
unset my_users[2]
You decide to run the following command: 
echo "${my_users[@]}"
What will be the outcome?
Incorrect -
user1 user2 user3 user5

Your choice: correct -
user1 user2 user4 user5

Incorrect -
user1 user2 user 3 user4

Incorrect -
user1 user 3 user4 user5

Incorrect -
I don't know yet.

Is something wrong with the question?

9.

In Bash, what is a valid way to return non-numeric values from a function?

9. In Bash, what is a valid way to return non-numeric values from a function?
Incorrect -
To return non-numeric values from a function, you should use the eval command, which is specifically designed to handle non-numeric data in functions.

Your choice: correct -
Store non-numerical values in global variables and access them outside of the function.

Incorrect -
There are no ways to return non-numeric values from a function.

Incorrect -
You can return non-numeric values using the return statement by simply providing a string or non-numeric value after the return keyword.

Incorrect -
I don't know yet.

Is something wrong with the question?

10.

As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?

10. As an administrator of a Linux server, you need to process each file with a .conf suffix in the /tmp directory. You have evaluated different techniques in a script. What is your best course of action?
Incorrect -
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' file
done
Incorrect -
for file in {/tmp/*.conf}; do
  grep '^Passwd yes' $file
done
Incorrect -
for $file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done
Your choice: correct -
for file in "/tmp/*.conf"; do
  grep '^Passwd yes' $file
done
Incorrect -
I don't know yet.

Is something wrong with the question?

11.

What is process substitution in the Bash shell?

11. What is process substitution in the Bash shell?
Incorrect -
Redirection of a text file to the stdin of a process.

Incorrect -
Redirection of the stdout of a process to a text file.

Your choice: correct -
Piping of the stdout of one or more processes to the stdin of another.

Incorrect -
Piping of the stdout of a single process to the stdin of another.

Incorrect -
I don't know yet.

Is something wrong with the question?

12.

What is the primary difference between a while loop and an until loop in Bash?

12. What is the primary difference between a while loop and an until loop in Bash?
Incorrect -
A while loop continues while a condition is false and an until loop continues until the condition becomes false.

Incorrect -
A while loop continues until a condition is true and an until loop continues while the condition remains true.

Correct -
A while loop continues when a condition is true and an until loop continues until the condition becomes true.

Your choice: incorrect -
A while loop continues while a condition is not true and an until loop continues until the condition becomes false.

Incorrect -
I don't know yet.

Is something wrong with the question?

13.

After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?

13. After reviewing variables returned in a subshell which variable should you use to access the Process ID (PID) of a Bash subshell?
Incorrect -
$SHELL
Incorrect -
$BASH
Your choice: correct -
$BASHPID
Incorrect -
$$
Incorrect -
I don't know yet.

Is something wrong with the question?

14.

Which is the correct syntax for using variable expansion to provide a default value? 

14. Which is the correct syntax for using variable expansion to provide a default value? 
Incorrect -
{$VARNAME:-$DEFAULT_VALUE} 
Your choice: correct -
${VARNAME:-DEFAULT_VALUE}
Incorrect -
${VARNAME:-$DEFAULT_VALUE} 
Incorrect -
${-DEFAULT_VALUE:VARNAME} 
Incorrect -
I don't know yet.

Is something wrong with the question?

15.

You must ensure that any entered value stored in a variable is maintained in lowercase. Which method would achieve the desired result?

15. You must ensure that any entered value stored in a variable is maintained in lowercase. Which method would achieve the desired result?
Incorrect -
MYVAR=lower
Incorrect -
declare -L MYVAR
Correct -
declare -l MYVAR
Your choice: incorrect -
export MYVAR=lower
Incorrect -
I don't know yet.

Is something wrong with the question?

16.

An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:

alias report="printf 'User: %s\nDirectory: %s\n'"
16. An alias has been created in Bash that allows two values to be printed. They currently print on multiple lines but you would prefer the values on one line and tab separated using two spaces for each tab. How do you change the current alias:
alias report="printf 'User: %s\nDirectory: %s\n'"
Your choice: correct -
alias report="tabs 2;printf 'User: %s\tDirectory: %s\n'"
Incorrect -
alias report="tabs=2;printf 'User: %s\tDirectory: %s\n'"
Incorrect -
alias report="tabs 2;printf 'User: %s\tDirectory: %s\t'"
Incorrect -
alias report="tabs=2;printf 'User: %s\tDirectory: %s\t'"
Incorrect -
I don't know yet.

Is something wrong with the question?

17.

You need to write a Bash script to monitor disk usage on multiple servers. The script should prompt the user to enter the names or IP addresses of the servers to monitor, store them in an array, and then run the df -h command on each one, storing the results in the file "output".

What script would best achieve this?

17. You need to write a Bash script to monitor disk usage on multiple servers. The script should prompt the user to enter the names or IP addresses of the servers to monitor, store them in an array, and then run the df -h command on each one, storing the results in the file "output". What script would best achieve this?
Incorrect -
echo "Please enter the names or IP addresses of the servers to monitor (separate each with a space):"
read -a servers

for server in "${servers[#]}"; do
    ssh "$server" 'df -h' >> output
done  
Your choice: correct -
echo "Please enter the names or IP addresses of the servers to monitor (separate each with a space):"
read -a servers

for server in "${servers[@]}"; do
    ssh "$server" 'df -h' >> output
done
Incorrect -
echo "Please enter the names or IP addresses of the servers to monitor (separate each with a space):"
read servers

for server in "${servers[@]}"; do
    ssh "$server" 'df -h' >> output
done 
Incorrect -
echo "Please enter the names or IP addresses of the servers to monitor (separate each with a space):"
read -a servers

for server in "${servers[$]}"; do
    ssh "$server" 'df -h' >> output
done  
Incorrect -
I don't know yet.

Is something wrong with the question?

18.

Suppose you have the following function defined in myfunction.sh:

#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:

#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?

18. Suppose you have the following function defined in myfunction.sh:
#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:
#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?
Incorrect -
#!/bin/bash
myfunction.sh(greet) 
Incorrect -
#!/bin/bash
import myfunction.sh
greet 
Your choice: correct -
#!/bin/bash
source myfunction.sh
greet
Incorrect -
#!/bin/bash
./myfunction.sh
greet
Incorrect -
I don't know yet.

Is something wrong with the question?

19.

You develop a script that should run code until the user chooses to quit. Having chosen to implement a while loop, which is a possible solution?

19. You develop a script that should run code until the user chooses to quit. Having chosen to implement a while loop, which is a possible solution?
Incorrect -
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" = "n" ] ; then
  break
 fi
done
Your choice: correct -
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Incorrect -
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$ANSWER" == "n" ] ; then
  break
 fi
done
Incorrect -
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  continue
 fi
done
Incorrect -
I don't know yet.

Is something wrong with the question?

20.

Which is a valid Bash variable name?

20. Which is a valid Bash variable name?
Incorrect -
var?
Incorrect -
1var
Incorrect -
var#
Your choice: correct -
_var1
Incorrect -
I don't know yet.

Is something wrong with the question?

21.

You need to create a script that takes two optional arguments, -n for specifying the name of a file and -o for specifying the owner of the file. 

Which of the following would be suited for this task? 

21. You need to create a script that takes two optional arguments, -n for specifying the name of a file and -o for specifying the owner of the file.  Which of the following would be suited for this task? 
Incorrect -
while getopts ":n:" opt; do
  case ${opt} in
    n )
      owner=${OPTARG}
      ;;
    o )
      name=${OPTARG}
      ;;  
Your choice: correct -
while getopts ":n:o:" opt; do
  case ${opt} in
    n )
      name=${OPTARG}
      ;;
    o )
      owner=${OPTARG}
      ;;
Incorrect -
while getopts ":n:" opt; do
  case ${opt} in
    n )
      name=${OPTARG}
      ;;
    o )
      owner=${OPTARG}
      ;; 
Incorrect -
while getopts ":n:o:" opt; do
  case ${opt} in
    no )
      name=${OPTARG}  owner=${OPTARG} ;;
Incorrect -
I don't know yet.

Is something wrong with the question?

22.

You create the following script designed to print the values of multiple variables with numerical suffixes.

#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?

22. You create the following script designed to print the values of multiple variables with numerical suffixes.
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo ${user$arg}
done
The script errors on execution, how would you correct the script so it prints both variables correctly?
Incorrect -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo $user$arg
done
Incorrect -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo $(user$arg)
done
Your choice: correct -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
eval "echo \${user$arg}"
done
Incorrect -
#!/usr/bin/bash
user1=bob
user2=jane
for arg in {1..2} ; do
echo "${user$arg}"
done
Incorrect -
I don't know yet.

Is something wrong with the question?

23.

What is the expected behavior of the following script? 

[[ $(id -u) -eq 0 ]] && user="yes" || user="no"

echo "$user"
23. What is the expected behavior of the following script? 
[[ $(id -u) -eq 0 ]] && user="yes" || user="no"

echo "$user"
Incorrect -
Checks if the UID of the current user is equal to 0 and outputs "yes" if the UID is not equal to 0 or "no" if it is equal to 0.  

Incorrect -
Checks if the UID of the current user is equal to 0 and always outputs "no".

Your choice: correct -
Checks if the UID of the current user is equal to 0 and outputs "yes" if the UID is equal to 0 or "no" if it is not equal to 0. 

Incorrect -
Checks if the UID of the current user is equal to 0 and always outputs "yes". 

Incorrect -
I don't know yet.

Is something wrong with the question?

24.

Consider the following script: 

sum=0
while [[ $# -gt 0 ]]
do
  sum=$((sum + $1))
  shift
done
echo "$sum"
What would the output of this script be if the parameters of the script are:

./script.sh 1 2 3 4 5
24. Consider the following script: 
sum=0
while [[ $# -gt 0 ]]
do
  sum=$((sum + $1))
  shift
done
echo "$sum"
What would the output of this script be if the parameters of the script are:
./script.sh 1 2 3 4 5
Incorrect -
14

Incorrect -
5

Incorrect -
10

Your choice: correct -
15

Incorrect -
I don't know yet.

Is something wrong with the question?

25.

You are aware that many of your developers make use of the umask extensively when working at the command line. Over time, you notice inconsistency in the execute permission being set on scripts. Currently, to set the execute permission for all objects the following command is used:

chmod +x file.sh
To ensure consistency in setting the execute permission for all objects how should you modify the command?

25. You are aware that many of your developers make use of the umask extensively when working at the command line. Over time, you notice inconsistency in the execute permission being set on scripts. Currently, to set the execute permission for all objects the following command is used:
chmod +x file.sh
To ensure consistency in setting the execute permission for all objects how should you modify the command?
Incorrect -
chmod -x
Incorrect -
chmod +X
Your choice: correct -
chmod a+x
Incorrect -
chmod a=x
Incorrect -
I don't know yet.

Is something wrong with the question?

26.

Which special variable is used to retrieve the number of arguments passed to a script?

26. Which special variable is used to retrieve the number of arguments passed to a script?
Incorrect -
$@

Your choice: incorrect -
$$ 

Incorrect -
$*

Correct -
$#

Incorrect -
I don't know yet.

Is something wrong with the question?

27.

You are creating a Bash script that should return success to the parent process. What will you do to ensure return success and you will add to the script?

27. You are creating a Bash script that should return success to the parent process. What will you do to ensure return success and you will add to the script?
Incorrect -
exit true
Incorrect -
exit 1
Your choice: correct -
exit 0
Incorrect -
exit TRUE
Incorrect -
I don't know yet.

Is something wrong with the question?

28.

How do the arrays differ that are initialized with declare -a and declare -A?

28. How do the arrays differ that are initialized with declare -a and declare -A?
Incorrect -
The option as an uppercase A is an invalid option and produces an error

Incorrect -
The two options are equivalent and either uppercase or lowercase A work in the same way

Your choice: correct -
Using lowercase a, array elements are accessed using the index value. Using uppercase A, elements are access using a key value.

Incorrect -
Using uppercase A, array elements are accessed using the index value. Using lowercase a, elements are access using a key value.

Incorrect -
I don't know yet.

Is something wrong with the question?

29.

The following script should allow for just one argument being supplied. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 

if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?

29. The following script should allow for just one argument being supplied. A colleague added a test to the script that does print the usage statement correctly if the wrong arguments are supplied; however the script still continues to run. 
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
echo "$1"
What would you recommend to solve the issue?
Incorrect -
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi
exit 2
echo "$1"
Your choice: correct -
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
  exit 2
fi
echo "$1"
Incorrect -
if [ $# -ne 1 ]
then
  echo "Usage $0 arg1"
fi echo "$1"
Incorrect -
if [ $# -ne 1 ]
then
  exit 2
  echo "Usage $0 arg1"
fi
echo "$1"
Incorrect -
I don't know yet.

Is something wrong with the question?

1. What is a key reason for using the declare command to create variables within bash?
Incorrect -
There is no significant reason for using the declare command within bash because we can name them instead.

Incorrect -
Using the declare command makes all variables persistent.

Your choice: correct -
Using declare allows you to explicitly specify the variable's attributes.

Incorrect -
Using the declare command is limited to creating global variables.

Incorrect -
I don't know yet.

Is something wrong with the question?


2.

You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.

sudo tar -cvf etc.tar /etc 2>/dev/null&
2. You need to run a command in the background; however, the output from the command is verbose and this is causing the command to run in the foreground intermittently. Review the command and identify a solution allowing the command to execute entirely in the background.
sudo tar -cvf etc.tar /etc 2>/dev/null&
Incorrect -
sudo tar -cvf etc.tar /etc >/dev/null&
Your choice: incorrect -
sudo tar -cvf etc.tar /etc 2>/dev/null
Correct -
sudo tar -cvf etc.tar /etc &>/dev/null&
Incorrect -
sudo tar -cvf etc.tar /etc 1>/dev/null&
Incorrect -
I don't know yet.

Is something wrong with the question?


3.

Taking into account that the following command was used to run the script named myscript as a daemon.

nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?

3. Taking into account that the following command was used to run the script named myscript as a daemon.
nohup /pathtoscript/myscript >/dev/null 2>&1 &
What would be a potential downside of such an approach?
Your choice: incorrect -
There is no downside to this approach as this is standard approach for modern Linux systems.

Incorrect -
The script will still be attached to the current terminal.

Incorrect -
It only provides the capacity for automatic restarts

Correct -
It doesn't provide proper process management and logging

Incorrect -
I don't know yet.

Is something wrong with the question?


4.

What is used with echo allows for embedded control characters?

4. What is used with echo allows for embedded control characters?
Incorrect -
-f

Incorrect -
-c

Your choice: correct -
-e

Incorrect -
-p

Incorrect -
I don't know yet.

Is something wrong with the question?


5.

Consider the following script.sh: 

echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4

With which single command should you replace the dotted line to make output of the script correct?

5. Consider the following script.sh: 
echo "Total arguments passed are: $#"
echo "The arguments are: $*"
................................
echo "The third argument is: $1"
The parameters passed to the script are the following: ./script.sh P1 P2 P3 P4  With which single command should you replace the dotted line to make output of the script correct?
Your choice: incorrect -
shift 1

Incorrect -
shift 3

Correct -
shift 2

Incorrect -
move 2

Incorrect -
I don't know yet.

Is something wrong with the question?


6.

As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?

6. As a Linux administrator you have been tasked with creating a multi-line message of the day file (/etc/motd) on a group of servers . You have decided to automate this within a script to be executed on each server. Which snippet would correctly create the /etc/motd file when executed as the root user?
Your choice: incorrect -
cat > /etc/motd <<<EOF
This a a secure system managed by example.com
Employee access only
<<<EOF
Incorrect -
read > /etc/motd <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Correct -
cat > /etc/motd <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Incorrect -
cat <<EOF
This a a secure system managed by example.com
Employee access only
EOF
Incorrect -
I don't know yet.

Is something wrong with the question?


7.

Which variable in Bash is used to represents the executing script's name?

7. Which variable in Bash is used to represents the executing script's name?
Incorrect -
$?
Incorrect -
$1
Your choice: correct -
$0
Incorrect -
$!
Incorrect -
I don't know yet.

Is something wrong with the question?


8.

In the context of Bash scripting, which specific term is used to declare a function?

8. In the context of Bash scripting, which specific term is used to declare a function?
Incorrect -
bash_function

Incorrect -
funct

Incorrect -
Bash functions cannot be defined using a keyword. 

Your choice: correct -
function

Incorrect -
I don't know yet.

Is something wrong with the question?


9.

The script file called myscript.sh contains the following command:

echo $#
What would be the expected output of the following command:

./myscript.sh alpha beta delta
9. The script file called myscript.sh contains the following command:
echo $#
What would be the expected output of the following command:
./myscript.sh alpha beta delta
Your choice: correct -
3

Incorrect -
alpha

beta

delta

Incorrect -
alpha beta delta

Incorrect -
$#

Incorrect -
I don't know yet.

Is something wrong with the question?


10.

The following script has been developed by your colleague who reports that it does not always terminate when the users request:

while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?

10. The following script has been developed by your colleague who reports that it does not always terminate when the users request:
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Some users may have CAPSLOCK engaged that could be causing the problem. What would you suggest as an edit to the script to help your colleague?
Your choice: incorrect -
while true; do
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "N" ] ; then
  break
 fi
done
Incorrect -
while true; do
 declare -L REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Correct -
while true; do
 declare -l REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Incorrect -
while true; do
 declare -l $REPLY
 read -p "Do you want to continue: y/n "
 echo "hello"
 if [ "$REPLY" == "n" ] ; then
  break
 fi
done
Incorrect -
I don't know yet.

Is something wrong with the question?


11.

Which character is used after each option letter to indicate that the option requires an argument when using the getopts function?

11. Which character is used after each option letter to indicate that the option requires an argument when using the getopts function?
Incorrect -
&

Incorrect -
|

Incorrect -
/

Your choice: correct -
:

Incorrect -
I don't know yet.

Is something wrong with the question?


12.

How does a HEREDOC differ from simple stdin redirection?

12. How does a HEREDOC differ from simple stdin redirection?
Your choice: incorrect -
Using HEREDOCs redirection is from stdout.

Incorrect -
A HEREDOC specifies the file to open.

Correct -
A HEREDOC specifies a block of text to be passed to the stdin of a process.

Incorrect -
HEREDOC redirection does not use delimeters which are used in stdin.

Incorrect -
I don't know yet.

Is something wrong with the question?


13.

Consider a situation where you have a shell script named "test" in your current working directory and an executable program with the same name "test" in the /usr/local/bin directory. Your PATH environment variable includes both the current working directory (.) and /usr/local/bin.

You can investigate the "test" command/program with either the type or which commands? Which would be better suited for this task ?

13. Consider a situation where you have a shell script named "test" in your current working directory and an executable program with the same name "test" in the /usr/local/bin directory. Your PATH environment variable includes both the current working directory (.) and /usr/local/bin. You can investigate the "test" command/program with either the type or which commands? Which would be better suited for this task ?
Incorrect -
Neither of these commands can be used for investigating the "test" command/program. 

Incorrect -
Both are equally good for inspecting the "test" program/command with no significant difference between the two.

Your choice: correct -
The type command would be more appropriate for inspecting the "test" command/program because it provides more comprehensive information about the command, indicating its type and location.

Incorrect -
The which command would be more appropriate for inspecting the "test" command/program because it provides more comprehensive information about the command, indicating its type and location. 

Incorrect -
I don't know yet.

Is something wrong with the question?


14.

Suppose you have the following function defined in myfunction.sh:

#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:

#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?

14. Suppose you have the following function defined in myfunction.sh:
#!/bin/bash

function greet()
{
        echo "hello!"
}
You are trying to call this function from within a second script file named myscript.sh which contains the following code:
#!/bin/bash
greet
This approach fails on execution. How would you fix the issue?
Your choice: incorrect -
#!/bin/bash
./myfunction.sh
greet
Incorrect -
#!/bin/bash
import myfunction.sh
greet 
Incorrect -
#!/bin/bash
myfunction.sh(greet) 
Correct -
#!/bin/bash
source myfunction.sh
greet
Incorrect -
I don't know yet.

Is something wrong with the question?


15.

Which is the correct syntax for using variable expansion to provide a default value? 

15. Which is the correct syntax for using variable expansion to provide a default value? 
Incorrect -
{$VARNAME:-$DEFAULT_VALUE} 
Incorrect -
${-DEFAULT_VALUE:VARNAME} 
Your choice: incorrect -
${VARNAME:-$DEFAULT_VALUE} 
Correct -
${VARNAME:-DEFAULT_VALUE}
Incorrect -
I don't know yet.

Is something wrong with the question?


16.

What is the shebang can be added to a script so it will print the execution trace for debugging purposes?

16. What is the shebang can be added to a script so it will print the execution trace for debugging purposes?
Your choice: incorrect -
#!/bin/bash -d
Correct -
#!/bin/bash -x
Incorrect -
#!/bin/bash -e
Incorrect -
#!/bin/bash -t
Incorrect -
I don't know yet.

Is something wrong with the question?


17.

You use these commands to create an array of users.

my_users=(user1 user2 user3)
my_users+=(user4 user5)
unset my_users[2]
You decide to run the following command: 

echo "${my_users[@]}"
What will be the outcome?

17. You use these commands to create an array of users.
my_users=(user1 user2 user3)
my_users+=(user4 user5)
unset my_users[2]
You decide to run the following command: 
echo "${my_users[@]}"
What will be the outcome?
Your choice: incorrect -
user1 user2 user 3 user4

Incorrect -
user1 user2 user3 user5

Correct -
user1 user2 user4 user5

Incorrect -
user1 user 3 user4 user5

Incorrect -
I don't know yet.

Is something wrong with the question?


18.

What is the difference between using the $# and $* special variables?

18. What is the difference between using the $# and $* special variables?
Incorrect -
There is no difference between the special variables and can be used interchangeably.

Your choice: correct -
The special variable $# holds the total number of arguments passed while the special variable $* holds the values of the arguments passed.

Incorrect -
The special variable $* holds the total number of arguments passed while the special variable $# holds the values of the arguments passed. 

Incorrect -
The special variable $# holds the total number of comments passed while the special variable $* holds the number of the arguments passed.

Incorrect -
I don't know yet.

Is something wrong with the question?


19.

A bash script you are analyzing prints each command before executing it and also exits immediately after a command fails. 

Which commands could cause this behavior?

19. A bash script you are analyzing prints each command before executing it and also exits immediately after a command fails.  Which commands could cause this behavior?
Your choice: correct -
set -x and set -e

Incorrect -
set -f and set -e

Incorrect -
set -x and set -u

Incorrect -
set -u and set -f

Incorrect -
I don't know yet.

Is something wrong with the question?


20.

What is the main difference between the $@ and the $* special parameters? 

20. What is the main difference between the $@ and the $* special parameters? 
Incorrect -
When using $@, the parameters are treated as a single string while $* treats each parameter as a separate integer.

Your choice: correct -
When using $*, the parameters are treated as a single string while $@ treats each parameter as a separate item.

Incorrect -
When using $@, the parameters are treated as a single string while $* treats each parameter as a separate item. 

Incorrect -
There is no significant difference between these special parameters.

Incorrect -
I don't know yet.

Is something wrong with the question?



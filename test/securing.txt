Spring Framework: Securing Spring Applications

1. You are using a GrantedAuthoritiesMapper to map OAuth2User.getAuthorities() to GrantedAuthority in order to retrieve the roles for a user from an OAuth identity store. You notice that some users that are authenticated don't have any role assigned. What might be the issue?
The users log in via an OpenID Connect provider and the authority is of type OidcUserAuthority.

2. A browser detects an XSS attack and attempts to change the content in order to still be able to render everything, however this replacement becomes a XSS vulnerability in itself. How would you implement the following Spring Security configure method to block Cross-site scripting?  
@Override
protected void configure(HttpSecurity http) throws Exception {} 
http.headers().xssProtection();

3. Which Spring Security annotation is used to configure the login functionality using OAuth?
@EnableWebSecurity

4. You are securing a Spring Data Rest API with Spring Security. You implement the following UserRepository:
@Repository
@PreAuthorize("hasRole('ROLE_ADMIN')")
public interface UserRepository extends JpaRepository<User, Long>{
  User findByUsername(String username);
}
You notice that only admins are able to query the findByUserName() method, but a regular user can query deleteAllInBatch();. How can you prevent this from happening?
Override deleteAllInBatch() method in the UserRepository interface.

5. How can you mitigate credential stuffing attacks against a Spring application?
By using a CAPTCHA as part of the login process

6. You are building an application that holds sensitive data (e.g social security numbers). You aim to avoid threats that occur when clients accept access tokens from sources other than intentional requests to a token endpoint. Which protocol would you chose for authentication?
OAuth 1.0a

7. What would you use to prevent a Structured Query Language (SQL) Injection attack by forcing the developer to first define all the SQL code and then passing each parameter to the query?
Query parameterization

8. What do you need to write in the below Spring Security configuration method in order to only allow admins to save a new User using the Spring Data Rest API endpoint "/users" and everybody else to see the list of User entries using the same endpoint?
@Override
    protected void configure(HttpSecurity http) throws Exception {

} 
http.authorizeRequests().antMatchers(HttpMethod.POST, "/users").hasRole("ROLE_ADMIN");

9. You are using GitHub to log in to a Spring Security OAuth2 application and the following exception is thrown:"org.springframework.http.converter.HttpMessageNotReadableException: An error occurred reading the OAuth 2.0 Access Token Response: tokenValue cannot be empty; nested exception is java.lang.IllegalArgumentException: tokenValue cannot be empty"

What might be the cause?
The clientSecret value is wrong.

10. Which is a two factor authentication method that you can use with Spring Security?
TOTP

11. You are debugging a Spring application that has a global exception handler class. That class contains the annotations @ControllerAdvice and @ExceptionHandler. You notice that all the exceptions thrown by Spring MVC are caught, but the ones thrown by Spring Security are not. What might be the issue?
The exceptions thrown by Spring Security custom filters run before the controller methods are invoked.

12. Your team is building an API for any reseller to access your company sales promotions. This is built using Spring Data REST and is available at https://sales.api.my-corp.com/promotions. A third party complained that they cannot call your API from their website. What can you do to resolve this situation?
Add the following to the getPromotions() controller method:

@CrossOrigin(origins = "*")

13. A developer configured Spring Security to disable the Cross Site Request Forgery (CSRF) protection on a Spring Data Rest API. What is the most likely explanation for their action?
If the application is attaching the credentials via an Authorization header, then the browser can't automatically authenticate the requests, therefore CSRF isn't possible.

14. You are investigating why the following user uid=bill,ou=accounts,dc=springframework,dc=org cannot authenticate with the Spring application your team maintains. The Spring application uses the following configuration to authenticate with Microsoft Active Directory:
public void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth
      .ldapAuthentication()
        .userDnPatterns("uid={0},ou=people")
        .contextSource()
          .url("ldap://localhost:8389/dc=springframework,dc=org");
}
How can you resolve this problem?
The application should set a userSearchFilter and configure a managerDn and managerPassword to enable searching for the user.

15. Your team's Spring application integrates with a third party system at the database level. Given the highly sensitive information stored within the third party system your application must ensure that fine grained access controls are implemented and follow the access controls stored by the third party application. The following table is in the database capturing access controls:
CREATE TABLE grants (
    USER_ID BIGINT,
    OBJECT_ID BIGINT,
    PERMISSIONS CHAR[],
    PRIMARY KEY (USER_ID, OBJECT_ID)
)
How would you go about solving this?
Make use of the hasPermission SpEL function and implement a custom PermissionEvaluator.

16. What is the name of the class that deals with AccessDeniedException and AuthenticationException in Spring Security Framework?
org.springframework.security.web.access.ExceptionTranslationFilter

17. You are tasked with adding email verification to the user registration process of a Spring application, the service code for this is as follows:
public User registerUser(String name, String email, String password) {
    User user = new User();    
    user.setName(name);
    user.setPassword(password);
    user.setEmail(email);
    user.setRoles(Arrays.asList("ROLE_USER"));
    user.setEnabled(true);
    return repository.save(user);       
}
What needs to be changed to support email verification?
user.setEnabled(false);

18. What grant type should you use when building a client-side web app or mobile app that uses OAuth to integrate with another provider's login (e.g. Facebook)?
Implicit

19. You secured your application with Spring Security Framework, however, when deployed in production, the requests are not redirected to HTTPS. How would you implement the following configure method in order to keep developing on http and only redirecting to https in production?
@Override
protected void configure(HttpSecurity http) throws Exception {}
http.requiresChannel().requestMatchers(r -> r.getHeader("x-forwarded-proto") != null).requireSecure();

20. You configure an application to use Spring Security Framework and you notice that only the primary domain is secured using HTTPS. How would you implement the following method in order to also secure the subdomains?  
@Override
protected void configure(HttpSecurity http) throws Exception {}
http.headers().httpStrictTransportSecurity().includeSubDomains(true); 

21. What is the purpose of implementing a UserDetailsService?
To provide details, including authentication data about a principal to DaoAuthenticationProvider

22. When securing an API using Spring Security, you often use BCrypt to encode the password. However, the BCrypt hashing algorithm is really slow. Why does this happen?
To avoid Brute Force Attacks

23. You are configuring a Spring Data Rest API and you want to only authorize admins to access the /admins endpoint. The Spring Security config class is annotated with @EnableGlobalMethodSecurity and the AdminRepository is annotated with @PreAuthorize("hasRole('ROLE_ADMIN')"), however a regular user is able to access /admins. Why? 
prePostEnabled = true is missing from @EnableGlobalMethodSecurity

24. What kind of attack can be done after a successful SQL Injection that will bypass password checks?
Denial-of-Service (DoS) attack

25. Your Spring application contains an API key encrypted in the application.properties. At startup, the application throws the following exception: "java.lang.IllegalStateException: Cannot decrypt: key=encrypted.property". What might be the cause?  
Spring cannot decrypt the property, because the decryption key is missing.

26. What is the default authority prefix that OAuth assigns to an authenticated principal?
SCOPE_

27. When using the JDBC based authentication provided by Spring Security, how can you use a custom database schema?
By configuring the SQL needed to look up users

28. When using a Time-based One-time Password (TOTP) as a second authentication factor with Spring Security, what additional information needs to be stored for each user?
A shared secret

29. What is the default behavior for Cache Control security header included with the Spring Security Framework?
Disable caching to protect user's content

30. You are debugging an application with Spring Security and Cross Site Request Forgery (CSRF) protection is enabled. You notice that for every request, the _csrf token has the same value "1234". Why is this happening?
The generateToken method from CsrfTokenRepository class is overridden to return a token with a static value.

